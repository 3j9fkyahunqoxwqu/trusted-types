{
"version":3,
"file":"trustedtypes.api_only.build.js",
"lineCount":12,
"mappings":"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",
"sources":["src/trustedtypes.js","src/polyfill/api_only.js"],
"sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\n/* eslint-disable no-unused-vars */\n/**\n * @typedef {TrustedTypesPolicy}\n * @property {function(string):TrustedHTML} createHTML\n * @property {function(string):TrustedURL} createURL\n * @property {function(string):TrustedScriptURL} createScriptURL\n * @property {function(string):TrustedScript} createScript\n */\nlet TrustedTypesPolicy = {};\n\n/**\n * @typedef {TrustedTypesInnerPolicy}\n * @property {function(string):string} createHTML\n * @property {function(string):string} createURL\n * @property {function(string):string} createScriptURL\n * @property {function(string):string} createScript\n */\nlet TrustedTypesInnerPolicy = {};\n/* eslint-enable no-unused-vars */\n\n\nexport const trustedTypesBuilderTestOnly = function() {\n  // Capture common names early.\n  const {\n    create, defineProperty, freeze, getOwnPropertyNames,\n    getPrototypeOf, prototype: ObjectPrototype,\n  } = Object;\n\n  const {\n    forEach, push,\n  } = Array.prototype;\n\n  const creatorSymbol = Symbol();\n\n  /**\n   * Getter for the privateMap.\n   * @param  {Object} obj Key of the privateMap\n   * @return {Object<string, string>} Private storage.\n   */\n  const privates = function(obj) {\n    let v = privateMap.get(obj);\n    if (v === undefined) {\n      v = create(null); // initialize the private storage.\n      privateMap.set(obj, v);\n    }\n    return v;\n  };\n\n  /**\n   * Called before attacker-controlled code on an internal collections,\n   * copies prototype members onto the instance directly, so that later\n   * changes to prototypes cannot expose collection internals.\n   * @param {!T} collection\n   * @return {!T} collection\n   * @template T\n   */\n  function selfContained(collection) {\n    const proto = getPrototypeOf(collection);\n    if (proto == null || getPrototypeOf(proto) !== ObjectPrototype) {\n      throw new Error(); // Loop below is insufficient.\n    }\n    for (let key of getOwnPropertyNames(proto)) {\n      defineProperty(collection, key, {value: collection[key]});\n    }\n    return collection;\n  }\n\n  /**\n   * Map for private properties of Trusted Types object.\n   * This is so that the access to the type constructor does not give\n   * the ability to create typed values.\n   * @type {WeakMap}\n   */\n  const privateMap = selfContained(new WeakMap());\n\n  /**\n   * List of all configured policy names.\n   * @type {Array<string>}\n   */\n  const policyNames = selfContained([]);\n\n  /**\n   * Map of all exposed policies, keyed by policy name.\n   * @type {Map<string,Object>}\n   */\n  const exposedPolicies = selfContained(new Map());\n\n  /**\n   * Allowed policy namess for policy names.\n   * @type {Array<string>}\n   */\n  const allowedNames = selfContained([]);\n\n  /**\n   * Whether to enforce allowedNames in createPolicy().\n   * @type {boolean}\n   */\n  let enforceNameWhitelist = false;\n\n\n  /**\n   * A value that is trusted to have certain security-relevant properties\n   * because the sources of such values are controlled.\n   */\n  class TrustedType {\n    /**\n     * Constructor for TrustedType. Only allowed to be called from within a\n     * policy.\n     * @param {symbol} s creatorSymbol\n     * @param {string} policyName The name of the policy this object was\n     *   created by.\n     */\n    constructor(s, policyName) {\n      // TODO: Figure out if symbol is needed, if the value is in privateMap.\n      if (s !== creatorSymbol) {\n        throw new Error('cannot call the constructor');\n      }\n      defineProperty(this, 'policyName',\n                     {value: '' + policyName, enumerable: true});\n    }\n\n    /**\n     * Returns the wrapped string value of the object.\n     * @return {string}\n     * @override\n     */\n    toString() {\n      return privates(this)['v'];\n    }\n\n    /**\n     * Returns the wrapped string value of the object.\n     * @return {string}\n     * @override\n     */\n    valueOf() {\n      return privates(this)['v'];\n    }\n  }\n\n  /**\n   * @param {function(new:TrustedType, symbol, string)} SubClass\n   * @param {string} canonName The class name which should be independent of\n   *     any renaming pass and which is relied upon by the enforcer and for\n   *     native type interop.\n   */\n  function lockdownTrustedType(SubClass, canonName) {\n    freeze(SubClass.prototype);\n    delete SubClass.name;\n    defineProperty(SubClass, 'name', {value: canonName});\n  }\n\n  /**\n   * Trusted URL object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedURL extends TrustedType {\n  }\n  lockdownTrustedType(TrustedURL, 'TrustedURL');\n\n  /**\n   * Trusted Script URL object wrapping a string that can only be created from a\n   * TT policy.\n   * TrustedScriptURL inherits from TrustedURL.\n   */\n  class TrustedScriptURL extends TrustedURL {\n  }\n  lockdownTrustedType(TrustedScriptURL, 'TrustedScriptURL');\n\n  /**\n   * Trusted HTML object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedHTML extends TrustedType {\n  }\n  lockdownTrustedType(TrustedHTML, 'TrustedHTML');\n\n  /**\n   * Trusted Script object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedScript extends TrustedType {\n  }\n  lockdownTrustedType(TrustedScript, 'TrustedScript');\n\n  lockdownTrustedType(TrustedType, 'TrustedType');\n\n  /**\n   * @type {!Object<string,!Function>}\n   */\n  const createTypeMapping = {\n    'createHTML': TrustedHTML,\n    'createScriptURL': TrustedScriptURL,\n    'createURL': TrustedURL,\n    'createScript': TrustedScript,\n  };\n\n  const createFunctionAllowed = createTypeMapping.hasOwnProperty;\n\n  /**\n   * Function generating a type checker.\n   * @template T\n   * @param  {T} type The type to check against.\n   * @return {function(*):boolean}\n   */\n  function isTrustedTypeChecker(type) {\n    return (obj) => (obj instanceof type) && privateMap.has(obj);\n  }\n\n  const rejectInputFn = (s) => {\n throw new TypeError('undefined conversion');\n};\n\n  /**\n   * Wraps a user-defined policy rules with TT constructor\n   * @param  {string} policyName The policy name\n   * @param  {TrustedTypesInnerPolicy} innerPolicy InnerPolicy\n   * @return {!TrustedTypesPolicy} Frozen policy object\n   */\n  function wrapPolicy(policyName, innerPolicy) {\n    /**\n     * @template T\n     * @param {function(new:T, symbol, string)} Ctor a trusted type constructor\n     * @param {string} methodName the policy factory method name\n     * @return {function(string):!T} a factory that produces instances of Ctor.\n     */\n    function creator(Ctor, methodName) {\n      // This causes thisValue to be null when called below.\n      const method = innerPolicy[methodName] || rejectInputFn;\n      const policySpecificType = freeze(new Ctor(creatorSymbol, policyName));\n      const factory = {\n        [methodName](s) { // Trick to get methodName to show in stacktrace.\n          let result = method(s);\n          if (result === undefined || result === null) {\n            result = '';\n          }\n          const allowedValue = '' + result;\n          const o = freeze(create(policySpecificType));\n          privates(o)['v'] = allowedValue;\n          return o;\n        },\n      }[methodName];\n      return freeze(factory);\n    }\n\n    let policy = create(null);\n\n    for (const name of getOwnPropertyNames(createTypeMapping)) {\n      policy[name] = creator(createTypeMapping[name], name);\n    }\n    policy.name = policyName;\n\n    return freeze(policy);\n  }\n\n  /**\n   * Returns a policy object, if given policy was exposed.\n   * @param  {string} name\n   * @return {?TrustedTypesPolicy}\n   */\n  function getExposedPolicy(name) {\n    const pName = '' + name;\n    return exposedPolicies.get(pName) || null;\n  }\n\n  /**\n   * Returns all configured policy names (even for non-exposed policies).\n   * @return {!Array<string>}\n   */\n  function getPolicyNames() {\n    // TODO(msamuel): Should we sort policyNames to avoid leaking or\n    // encouraging dependency on the order in which policy names are\n    // registered?  I think JavaScript builtin sorts are efficient for\n    // almost-sorted lists so the amortized cost is close to O(n).\n    return policyNames.slice();\n  }\n\n  /**\n   * Creates a TT policy.\n   *\n   * Returns a frozen object representing a policy - a collection of functions\n   * that may create TT objects based on the user-provided rules specified\n   * in the policy object.\n   *\n   * @param  {string} name A unique name of the policy.\n   * @param  {TrustedTypesInnerPolicy} policy Policy rules object.\n   * @param  {boolean=} expose Iff true, the policy will be exposed (available\n   *   globally).\n   * @return {TrustedTypesPolicy} The policy that may create TT objects\n   *   according to the policy rules.\n   * @todo Figure out if the return value (and the policy) can be typed.\n   */\n  function createPolicy(name, policy, expose = false) {\n    const pName = '' + name; // Assert it's a string\n\n    if (enforceNameWhitelist && allowedNames.indexOf(pName) === -1) {\n      throw new TypeError('Policy ' + pName + ' disallowed.');\n    }\n\n    if (policyNames.indexOf(pName) !== -1) {\n      throw new TypeError('Policy ' + pName + ' exists.');\n    }\n    // Register the name early so that if policy getters unwisely calls\n    // across protection domains to code that reenters this function,\n    // policy author still has rights to the name.\n    policyNames.push(pName);\n\n    // Only copy own properties of names present in createTypeMapping.\n    const innerPolicy = create(null);\n    if (policy && typeof policy === 'object') {\n      // Treat non-objects as empty policies.\n      for (const key of getOwnPropertyNames(policy)) {\n        if (createFunctionAllowed.call(createTypeMapping, key)) {\n          innerPolicy[key] = policy[key];\n        }\n      }\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn('TrustedTypes.createPolicy ' + pName +\n          ' was given an empty policy');\n    }\n    freeze(innerPolicy);\n\n    const wrappedPolicy = wrapPolicy(pName, innerPolicy);\n\n    if (expose) {\n      exposedPolicies.set(pName, wrappedPolicy);\n    }\n\n    return wrappedPolicy;\n  }\n\n  /**\n   * Applies the policy name whitelist.\n   * @param {!Array<string>} allowedPolicyNames\n   */\n  function setAllowedPolicyNames(allowedPolicyNames) {\n    if (allowedPolicyNames.indexOf('*') !== -1) { // Any policy name is allowed.\n      enforceNameWhitelist = false;\n    } else {\n      enforceNameWhitelist = true;\n      allowedNames.length = 0;\n      forEach.call(allowedPolicyNames, (el) => {\n        push.call(allowedNames, '' + el);\n      });\n    }\n  }\n\n  // TODO: Figure out if it's safe to return an instance of a typed object\n  // to make testing easier.\n  return freeze({\n\n    // Types definition, for convenience of instanceof checks\n    TrustedHTML,\n    TrustedURL,\n    TrustedScriptURL,\n    TrustedScript,\n\n    // The main function to create policies.\n    createPolicy,\n\n    // Policy getter\n    getExposedPolicy,\n\n    getPolicyNames,\n\n    // Below methods are not part of the public API and are only needed in the\n    // polyfill.\n\n    // Type checkers, also validating the object was initialized through a\n    // policy.\n    isHTML: isTrustedTypeChecker(TrustedHTML),\n    isURL: isTrustedTypeChecker(TrustedURL),\n    isScriptURL: isTrustedTypeChecker(TrustedScriptURL),\n    isScript: isTrustedTypeChecker(TrustedScript),\n\n    setAllowedPolicyNames,\n  });\n};\n\nexport const TrustedTypes = trustedTypesBuilderTestOnly();\nexport const TrustedHTML = TrustedTypes.TrustedHTML;\nexport const TrustedURL = TrustedTypes.TrustedURL;\nexport const TrustedScriptURL = TrustedTypes.TrustedScriptURL;\nexport const TrustedScript = TrustedTypes.TrustedScript;\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\n/**\n * @fileoverview Entry point for a polyfill that only defines the types\n * (i.e. no enforcement logic).\n */\nimport {TrustedTypes, TrustedHTML, TrustedURL, TrustedScriptURL, TrustedScript}\n    from '../trustedtypes.js';\n\nconst tt = TrustedTypes;\n\n// Make sure Closure compiler exposes the names.\nif (typeof window !== 'undefined' &&\n    typeof window['TrustedTypes'] === 'undefined') {\n  window['TrustedTypes'] = {\n    'isHTML': tt.isHTML,\n    'isURL': tt.isURL,\n    'isScriptURL': tt.isScriptURL,\n    'isScript': tt.isScript,\n    'createPolicy': tt.createPolicy,\n    'getExposedPolicy': tt.getExposedPolicy,\n    'getPolicyNames': tt.getPolicyNames,\n  };\n\n  window['TrustedHTML'] = TrustedHTML;\n  window['TrustedURL'] = TrustedURL;\n  window['TrustedScriptURL'] = TrustedScriptURL;\n  window['TrustedScript'] = TrustedScript;\n}\n\nexport default tt;\n"],
"names":["TrustedTypes","trustedTypesBuilderTestOnly","privates","obj","v","privateMap","get","undefined","create","set","selfContained","collection","proto","getPrototypeOf","ObjectPrototype","Error","key","getOwnPropertyNames","defineProperty","value","lockdownTrustedType","SubClass","canonName","freeze","prototype","name","isTrustedTypeChecker","type","has","wrapPolicy","policyName","innerPolicy","creator","Ctor","methodName","method","rejectInputFn","policySpecificType","creatorSymbol","s","result","allowedValue","o","factory","policy","createTypeMapping","Object","forEach","push","Array","Symbol","WeakMap","policyNames","exposedPolicies","Map","allowedNames","enforceNameWhitelist","TrustedType","enumerable","TrustedURL","TrustedScriptURL","TrustedHTML","TrustedScript","createFunctionAllowed","hasOwnProperty","TypeError","createPolicy","expose","pName","indexOf","call","console","warn","wrappedPolicy","getExposedPolicy","getPolicyNames","slice","isHTML","isURL","isScriptURL","isScript","setAllowedPolicyNames","allowedPolicyNames","length","el","window"]
}
