{
"version":3,
"file":"trustedtypes.api_only.build.js",
"lineCount":12,
"mappings":"A;;;;;;;;aA0WO,MAAMA,EA5U8BC,QAAQ,EAAG,CAkBnCC,QAAA,EAAQ,CAACC,CAAD,CAAM,CAC7B,IAAIC,EAAIC,CAAAC,IAAA,CAAeH,CAAf,CACEI,KAAAA,EAAV,GAAIH,CAAJ,GACEA,CACA,CADII,CAAA,CAAO,IAAP,CACJ,CAAAH,CAAAI,IAAA,CAAeN,CAAf,CAAoBC,CAApB,CAFF,CAIA,OAAOA,EANsB,CAiB/BM,QAASA,EAAa,CAACC,CAAD,CAAa,CACjC,MAAMC,EAAQC,CAAA,CAAeF,CAAf,CACd,IAAa,IAAb,EAAIC,CAAJ,EAAqBC,CAAA,CAAeD,CAAf,CAArB,GAA+CE,CAA/C,CACE,KAAUC,MAAJ,EAAN,CAEF,IAAK,IAAIC,CAAT,GAAgBC,EAAA,CAAoBL,CAApB,CAAhB,CACEM,CAAA,CAAeP,CAAf,CAA2BK,CAA3B,CAAgC,CAACG,MAAOR,CAAA,CAAWK,CAAX,CAAR,CAAhC,CAEF,OAAOL,EAR0B,CA0FnCS,QAASA,EAAmB,CAACC,CAAD,CAAWC,CAAX,CAAsB,CAChDC,CAAA,CAAOF,CAAAG,UAAP,CACA,QAAOH,CAAAI,KACPP,EAAA,CAAeG,CAAf,CAAyB,MAAzB,CAAiC,CAACF,MAAOG,CAAR,CAAjC,CAHgD,CA+ClDI,QAASA,EAAoB,CAACC,CAAD,CAAO,CAClC,MAAO,CAACxB,CAAD,CAAA,EAAUA,CAAV,WAAyBwB,EAAzB,EAAkCtB,CAAAuB,IAAA,CAAezB,CAAf,CADP,CAcpC0B,QAASA,EAAU,CAACC,CAAD,CAAaC,CAAb,CAA0B,CAO3CC,QAASA,EAAO,CAACC,CAAD,CAAOC,CAAP,CAAmB,CAEjC,MAAMC,EAASJ,CAAA,CAAYG,CAAZ,CAATC,EAAoCC,CAA1C,CACMC,EAAqBd,CAAA,CAAO,IAAIU,CAAJ,CAASK,CAAT,CAAwBR,CAAxB,CAAP,CAS3B,OAAOP,EAAA,CARS,CACd,CAACW,CAAD,CAAY,CAACK,CAAD,CAAI,CACRC,CAAAA,CAAe,EAAfA,CAAoBL,CAAA,CAAOI,CAAP,CAC1B,OAAME,EAAIlB,CAAA,CAAOf,CAAA,CAAO6B,CAAP,CAAP,CACVnC,EAAA,CAASuC,CAAT,CAAA,EAAA,CAAmBD,CACnB,OAAOC,EAJO,CADF,CAAAC,CAOdR,CAPcQ,CAQT,CAZ0B,CAenC,MAAOnB,EAAA,CAAO,CACZ,WAAcS,CAAA,CAAQW,CAAR,CAAqB,YAArB,CADF;AAEZ,gBAAmBX,CAAA,CAAQY,CAAR,CAA0B,iBAA1B,CAFP,CAGZ,UAAaZ,CAAA,CAAQa,CAAR,CAAoB,WAApB,CAHD,CAIZ,aAAgBb,CAAA,CAAQc,CAAR,CAAuB,cAAvB,CAJJ,CAAP,CAtBoC,CAxL7C,MAAM,CACJ,OAAAC,CADI,CACI,OAAAvC,CADJ,CACY,eAAAU,CADZ,CAC4B,OAAAK,CAD5B,CACoC,oBAAAN,CADpC,CAEJ,eAAAJ,CAFI,CAEY,UAAWC,CAFvB,CAAA,CAGFkC,MAHJ,CAKM,CACJ,QAAAC,CADI,CACK,KAAAC,CADL,CAAA,CAEFC,KAAA3B,UAPJ,CASMc,EAAgBc,MAAA,EATtB,CAkDM/C,EAAaK,CAAA,CAAc,IAAI2C,OAAlB,CAlDnB,CAwDMC,EAAc5C,CAAA,CAAc,EAAd,CAxDpB,CA8DM6C,EAAkB7C,CAAA,CAAc,IAAI8C,GAAlB,CA9DxB,CAoEMC,EAAe/C,CAAA,CAAc,EAAd,CAMrB,KAAIgD,EAAuB,CAAA,CAO3B,MAAMC,EAAN,CAQE,WAAW,CAACpB,CAAD,CAAIT,CAAJ,CAAgB,CAEzB,GAAIS,CAAJ,GAAUD,CAAV,CACE,KAAUvB,MAAJ,CAAU,6BAAV,CAAN,CAEFG,CAAA,CAAe,IAAf,CAAqB,YAArB,CACe,CAACC,MAAO,EAAPA,CAAYW,CAAb,CAAyB8B,WAAY,CAAA,CAArC,CADf,CALyB,CAc3B,QAAQ,EAAG,CACT,MAAO1D,EAAA,CAAS,IAAT,CAAA,EADE,CASX,OAAO,EAAG,CACR,MAAOA,EAAA,CAAS,IAAT,CAAA,EADC,CA/BZ,CAoDA,KAAM2C,EAAN,QAAyBc,EAAzB;AAEAvC,CAAA,CAAoByB,CAApB,CAAgC,YAAhC,CAOA,MAAMD,EAAN,QAA+BC,EAA/B,EAEAzB,CAAA,CAAoBwB,CAApB,CAAsC,kBAAtC,CAMA,MAAMD,EAAN,QAA0BgB,EAA1B,EAEAvC,CAAA,CAAoBuB,CAApB,CAAiC,aAAjC,CAMA,MAAMG,EAAN,QAA4Ba,EAA5B,EAEAvC,CAAA,CAAoB0B,CAApB,CAAmC,eAAnC,CAEA1B,EAAA,CAAoBuC,CAApB,CAAiC,aAAjC,CAYA,OAAMvB,EAAgB,EAAAA,EAAO,CAC9B,KAAUrB,MAAJ,CAAU,sBAAV,CAAN,CAD8B,CA8H7B,OAAOQ,EAAA,CAAO,CAGZoB,EAAAA,CAHY,CAIZE,EAAAA,CAJY,CAKZD,EAAAA,CALY,CAMZE,EAAAA,CANY,CASZe,EA1DFA,QAAqB,CAACpC,CAAD,CAAOqC,CAAP,CAAeC,CAAA,CAAS,CAAA,CAAxB,CAA+B,CAC5CC,CAAAA,CAAQ,EAARA,CAAavC,CAEnB,IAAIiC,CAAJ,EAA6D,EAA7D,GAA4BD,CAAAQ,QAAA,CAAqBD,CAArB,CAA5B,CACE,KAAUjD,MAAJ,CAAU,SAAV,CAAsBiD,CAAtB,CAA8B,cAA9B,CAAN,CAGF,GAAoC,EAApC,GAAIV,CAAAW,QAAA,CAAoBD,CAApB,CAAJ,CACE,KAAUjD,MAAJ,CAAU,SAAV,CAAsBiD,CAAtB,CAA8B,UAA9B,CAAN,CAKFV,CAAAJ,KAAA,CAAiBc,CAAjB,CAEA,OAAMjC,EAAcgB,CAAA,CAAOvC,CAAA,CAAO,IAAP,CAAP,CACpBuB,EAAA,WAAA,CAA4B+B,CAAA,WAC5B/B,EAAA,UAAA,CAA2B+B,CAAA,UAC3B/B,EAAA,gBAAA,CAAiC+B,CAAA,gBACjC/B,EAAA,aAAA;AAA8B+B,CAAA,aAC9BvC,EAAA,CAAOQ,CAAP,CAEMmC,EAAAA,CAAgBrC,CAAA,CAAWmC,CAAX,CAAkBjC,CAAlB,CAElBgC,EAAJ,EACER,CAAA9C,IAAA,CAAoBuD,CAApB,CAA2BE,CAA3B,CAGF,OAAOA,EA5B2C,CAiDtC,CAYZC,EA7FFA,QAAyB,CAAC1C,CAAD,CAAO,CAE9B,MAAO8B,EAAAjD,IAAA,CADO,EACP,CADYmB,CACZ,CAAP,EAAqC,IAFP,CAiFlB,CAcZ2C,EAtFFA,QAAuB,EAAG,CAKxB,MAAOd,EAAAe,MAAA,EALiB,CAwEZ,CAqBZC,EAAQ5C,CAAA,CAAqBiB,CAArB,CArBI,CAsBZ4B,EAAO7C,CAAA,CAAqBmB,CAArB,CAtBK,CAuBZ2B,EAAa9C,CAAA,CAAqBkB,CAArB,CAvBD,CAwBZ6B,EAAU/C,CAAA,CAAqBoB,CAArB,CAxBE,CA0BZ4B,EAxCFA,QAA8B,CAACC,CAAD,CAAqB,CACR,EAAzC,GAAIA,CAAAV,QAAA,CAA2B,GAA3B,CAAJ,CACEP,CADF,CACyB,CAAA,CADzB,EAGEA,CAEA,CAFuB,CAAA,CAEvB,CADAD,CAAAmB,OACA,CADsB,CACtB,CAAA3B,CAAA4B,KAAA,CAAaF,CAAb,CAAiC,CAACG,CAAD,CAAA,EAAQ,CACvC5B,CAAA2B,KAAA,CAAUpB,CAAV,CAAwB,EAAxB,CAA6BqB,CAA7B,CADuC,CAAzC,CALF,CADiD,CAcrC,CAAP,CA9S6C,CA4U1B,E,CCxVN,WAAtB,GAAI,MAAOC,OAAX,EACsC,WADtC,GACI,MAAOA,OAAA,aADX,GAEEA,MAAA,aAFF,CAE2B,CACvB,YDqVS/E,CCrVM2C,EADQ,CAEvB,WDoVS3C,CCpVK6C,EAFS,CAGvB,iBDmVS7C,CCnVW4C,EAHG,CAIvB,cDkVS5C,CClVQ8C,EAJM,CAKvB,WDiVS9C,CCjVKgF,EALS,CAMvB,UDgVShF,CChVIiF,EANU,CAOvB,gBD+USjF,CC/UUkF,EAPI,CAQvB,aD8USlF,CC9UOmF,EARO,CASvB,aD6USnF,CC7UO6D,EATO,CAUvB,iBD4US7D,CC5UWmE,EAVG,CAWvB,eD2USnE,CC3USoE,EAXK,CAF3B;",
"sources":["src/trustedtypes.js","src/polyfill/api_only.js"],
"sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\n/* eslint-disable no-unused-vars */\n/**\n * @typedef {TrustedTypesPolicy}\n * @property {function(string):TrustedHTML} createHTML\n * @property {function(string):TrustedURL} createURL\n * @property {function(string):TrustedScriptURL} createScriptURL\n * @property {function(string):TrustedScript} createScript\n */\nlet TrustedTypesPolicy = {};\n\n/**\n * @typedef {TrustedTypesInnerPolicy}\n * @property {function(string):string} createHTML\n * @property {function(string):string} createURL\n * @property {function(string):string} createScriptURL\n * @property {function(string):string} createScript\n */\nlet TrustedTypesInnerPolicy = {};\n/* eslint-enable no-unused-vars */\n\n\nexport const trustedTypesBuilderTestOnly = function() {\n  // Capture common names early.\n  const {\n    assign, create, defineProperty, freeze, getOwnPropertyNames,\n    getPrototypeOf, prototype: ObjectPrototype,\n  } = Object;\n\n  const {\n    forEach, push,\n  } = Array.prototype;\n\n  const creatorSymbol = Symbol();\n\n  /**\n   * Getter for the privateMap.\n   * @param  {Object} obj Key of the privateMap\n   * @return {Object<string, string>} Private storage.\n   */\n  const privates = function(obj) {\n    let v = privateMap.get(obj);\n    if (v === undefined) {\n      v = create(null); // initialize the private storage.\n      privateMap.set(obj, v);\n    }\n    return v;\n  };\n\n  /**\n   * Called before attacker-controlled code on an internal collections,\n   * copies prototype members onto the instance directly, so that later\n   * changes to prototypes cannot expose collection internals.\n   * @param {!T} collection\n   * @return {!T} collection\n   * @template T\n   */\n  function selfContained(collection) {\n    const proto = getPrototypeOf(collection);\n    if (proto == null || getPrototypeOf(proto) !== ObjectPrototype) {\n      throw new Error(); // Loop below is insufficient.\n    }\n    for (let key of getOwnPropertyNames(proto)) {\n      defineProperty(collection, key, {value: collection[key]});\n    }\n    return collection;\n  }\n\n  /**\n   * Map for private properties of Trusted Types object.\n   * This is so that the access to the type constructor does not give\n   * the ability to create typed values.\n   * @type {WeakMap}\n   */\n  const privateMap = selfContained(new WeakMap());\n\n  /**\n   * List of all configured policy names.\n   * @type {Array<string>}\n   */\n  const policyNames = selfContained([]);\n\n  /**\n   * Map of all exposed policies, keyed by policy name.\n   * @type {Map<string,Object>}\n   */\n  const exposedPolicies = selfContained(new Map());\n\n  /**\n   * Allowed policy namess for policy names.\n   * @type {Array<string>}\n   */\n  const allowedNames = selfContained([]);\n\n  /**\n   * Whether to enforce allowedNames in createPolicy().\n   * @type {boolean}\n   */\n  let enforceNameWhitelist = false;\n\n\n  /**\n   * A value that is trusted to have certain security-relevant properties\n   * because the sources of such values are controlled.\n   */\n  class TrustedType {\n    /**\n     * Constructor for TrustedType. Only allowed to be called from within a\n     * policy.\n     * @param {symbol} s creatorSymbol\n     * @param {string} policyName The name of the policy this object was\n     *   created by.\n     */\n    constructor(s, policyName) {\n      // TODO: Figure out if symbol is needed, if the value is in privateMap.\n      if (s !== creatorSymbol) {\n        throw new Error('cannot call the constructor');\n      }\n      defineProperty(this, 'policyName',\n                     {value: '' + policyName, enumerable: true});\n    }\n\n    /**\n     * Returns the wrapped string value of the object.\n     * @return {string}\n     * @override\n     */\n    toString() {\n      return privates(this)['v'];\n    }\n\n    /**\n     * Returns the wrapped string value of the object.\n     * @return {string}\n     * @override\n     */\n    valueOf() {\n      return privates(this)['v'];\n    }\n  }\n\n  /**\n   * @param {function(new:TrustedType, symbol, string)} SubClass\n   * @param {string} canonName The class name which should be independent of\n   *     any renaming pass and which is relied upon by the enforcer and for\n   *     native type interop.\n   */\n  function lockdownTrustedType(SubClass, canonName) {\n    freeze(SubClass.prototype);\n    delete SubClass.name;\n    defineProperty(SubClass, 'name', {value: canonName});\n  }\n\n  /**\n   * Trusted URL object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedURL extends TrustedType {\n  }\n  lockdownTrustedType(TrustedURL, 'TrustedURL');\n\n  /**\n   * Trusted Script URL object wrapping a string that can only be created from a\n   * TT policy.\n   * TrustedScriptURL inherits from TrustedURL.\n   */\n  class TrustedScriptURL extends TrustedURL {\n  }\n  lockdownTrustedType(TrustedScriptURL, 'TrustedScriptURL');\n\n  /**\n   * Trusted HTML object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedHTML extends TrustedType {\n  }\n  lockdownTrustedType(TrustedHTML, 'TrustedHTML');\n\n  /**\n   * Trusted Script object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedScript extends TrustedType {\n  }\n  lockdownTrustedType(TrustedScript, 'TrustedScript');\n\n  lockdownTrustedType(TrustedType, 'TrustedType');\n\n  /**\n   * Function generating a type checker.\n   * @template T\n   * @param  {T} type The type to check against.\n   * @return {function(*):boolean}\n   */\n  function isTrustedTypeChecker(type) {\n    return (obj) => (obj instanceof type) && privateMap.has(obj);\n  }\n\n  const rejectInputFn = (s) => {\n throw new Error('undefined conversion');\n};\n\n  /**\n   * Wraps a user-defined policy rules with TT constructor\n   * @param  {string} policyName The policy name\n   * @param  {TrustedTypesInnerPolicy} innerPolicy InnerPolicy\n   * @return {!TrustedTypesPolicy} Frozen policy object\n   */\n  function wrapPolicy(policyName, innerPolicy) {\n    /**\n     * @template T\n     * @param {function(new:T, symbol, string)} Ctor a trusted type constructor\n     * @param {string} methodName the policy factory method name\n     * @return {function(string):!T} a factory that produces instances of Ctor.\n     */\n    function creator(Ctor, methodName) {\n      // This causes thisValue to be null when called below.\n      const method = innerPolicy[methodName] || rejectInputFn;\n      const policySpecificType = freeze(new Ctor(creatorSymbol, policyName));\n      const factory = {\n        [methodName](s) { // Trick to get methodName to show in stacktrace.\n          const allowedValue = '' + method(s);\n          const o = freeze(create(policySpecificType));\n          privates(o)['v'] = allowedValue;\n          return o;\n        },\n      }[methodName];\n      return freeze(factory);\n    }\n\n    return freeze({\n      'createHTML': creator(TrustedHTML, 'createHTML'),\n      'createScriptURL': creator(TrustedScriptURL, 'createScriptURL'),\n      'createURL': creator(TrustedURL, 'createURL'),\n      'createScript': creator(TrustedScript, 'createScript'),\n    });\n  }\n\n  /**\n   * Returns a policy object, if given policy was exposed.\n   * @param  {string} name\n   * @return {?TrustedTypesPolicy}\n   */\n  function getExposedPolicy(name) {\n    const pName = '' + name;\n    return exposedPolicies.get(pName) || null;\n  }\n\n  /**\n   * Returns all configured policy names (even for non-exposed policies).\n   * @return {!Array<string>}\n   */\n  function getPolicyNames() {\n    // TODO(msamuel): Should we sort policyNames to avoid leaking or\n    // encouraging dependency on the order in which policy names are\n    // registered?  I think JavaScript builtin sorts are efficient for\n    // almost-sorted lists so the amortized cost is close to O(n).\n    return policyNames.slice();\n  }\n\n  /**\n   * Creates a TT policy.\n   *\n   * Returns a frozen object representing a policy - a collection of functions\n   * that may create TT objects based on the user-provided rules specified\n   * in the policy object.\n   *\n   * @param  {string} name A unique name of the policy.\n   * @param  {TrustedTypesInnerPolicy} policy Policy rules object.\n   * @param  {boolean=} expose Iff true, the policy will be exposed (available\n   *   globally).\n   * @return {TrustedTypesPolicy} The policy that may create TT objects\n   *   according to the policy rules.\n   * @todo Figure out if the return value (and the policy) can be typed.\n   */\n  function createPolicy(name, policy, expose = false) {\n    const pName = '' + name; // Assert it's a string\n\n    if (enforceNameWhitelist && allowedNames.indexOf(pName) === -1) {\n      throw new Error('Policy ' + pName + ' disallowed.');\n    }\n\n    if (policyNames.indexOf(pName) !== -1) {\n      throw new Error('Policy ' + pName + ' exists.');\n    }\n    // Register the name early so that if policy getters unwisely calls\n    // across protection domains to code that reenters this function,\n    // policy author still has rights to the name.\n    policyNames.push(pName);\n\n    const innerPolicy = assign(create(null));\n    innerPolicy['createHTML'] = policy['createHTML'];\n    innerPolicy['createURL'] = policy['createURL'];\n    innerPolicy['createScriptURL'] = policy['createScriptURL'];\n    innerPolicy['createScript'] = policy['createScript'];\n    freeze(innerPolicy);\n\n    const wrappedPolicy = wrapPolicy(pName, innerPolicy);\n\n    if (expose) {\n      exposedPolicies.set(pName, wrappedPolicy);\n    }\n\n    return wrappedPolicy;\n  }\n\n  /**\n   * Applies the policy name whitelist.\n   * @param {!Array<string>} allowedPolicyNames\n   */\n  function setAllowedPolicyNames(allowedPolicyNames) {\n    if (allowedPolicyNames.indexOf('*') !== -1) { // Any policy name is allowed.\n      enforceNameWhitelist = false;\n    } else {\n      enforceNameWhitelist = true;\n      allowedNames.length = 0;\n      forEach.call(allowedPolicyNames, (el) => {\n        push.call(allowedNames, '' + el);\n      });\n    }\n  }\n\n  // TODO: Figure out if it's safe to return an instance of a typed object\n  // to make testing easier.\n  return freeze({\n\n    // Types definition, for convenience of instanceof checks\n    TrustedHTML,\n    TrustedURL,\n    TrustedScriptURL,\n    TrustedScript,\n\n    // The main function to create policies.\n    createPolicy,\n\n    // Policy getter\n    getExposedPolicy,\n\n    getPolicyNames,\n\n    // Below methods are not part of the public API and are only needed in the\n    // polyfill.\n\n    // Type checkers, also validating the object was initialized through a\n    // policy.\n    isHTML: isTrustedTypeChecker(TrustedHTML),\n    isURL: isTrustedTypeChecker(TrustedURL),\n    isScriptURL: isTrustedTypeChecker(TrustedScriptURL),\n    isScript: isTrustedTypeChecker(TrustedScript),\n\n    setAllowedPolicyNames,\n  });\n};\n\nexport const TrustedTypes = trustedTypesBuilderTestOnly();\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\n/**\n * @fileoverview Entry point for a polyfill that only defines the types\n * (i.e. no enforcement logic).\n */\nimport {TrustedTypes} from '../trustedtypes.js';\n\nconst tt = TrustedTypes;\n\n// Make sure Closure compiler exposes the names.\nif (typeof window !== 'undefined' &&\n    typeof window['TrustedTypes'] === 'undefined') {\n  window['TrustedTypes'] = {\n    'TrustedHTML': tt.TrustedHTML,\n    'TrustedURL': tt.TrustedURL,\n    'TrustedScriptURL': tt.TrustedScriptURL,\n    'TrustedScript': tt.TrustedScript,\n    'createHTML': tt.createHTML,\n    'createURL': tt.createURL,\n    'createScriptURL': tt.createScriptURL,\n    'createScript': tt.createScript,\n    'createPolicy': tt.createPolicy,\n    'getExposedPolicy': tt.getExposedPolicy,\n    'getPolicyNames': tt.getPolicyNames,\n  };\n}\n\nexport default tt;\n"],
"names":["TrustedTypes","trustedTypesBuilderTestOnly","privates","obj","v","privateMap","get","undefined","create","set","selfContained","collection","proto","getPrototypeOf","ObjectPrototype","Error","key","getOwnPropertyNames","defineProperty","value","lockdownTrustedType","SubClass","canonName","freeze","prototype","name","isTrustedTypeChecker","type","has","wrapPolicy","policyName","innerPolicy","creator","Ctor","methodName","method","rejectInputFn","policySpecificType","creatorSymbol","s","allowedValue","o","factory","TrustedHTML","TrustedScriptURL","TrustedURL","TrustedScript","assign","Object","forEach","push","Array","Symbol","WeakMap","policyNames","exposedPolicies","Map","allowedNames","enforceNameWhitelist","TrustedType","enumerable","createPolicy","policy","expose","pName","indexOf","wrappedPolicy","getExposedPolicy","getPolicyNames","slice","isHTML","isURL","isScriptURL","isScript","setAllowedPolicyNames","allowedPolicyNames","length","call","el","window","createHTML","createURL","createScriptURL","createScript"]
}
