{
"version":3,
"file":"trustedtypes.build.js",
"lineCount":21,
"mappings":"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",
"sources":["src/data/trustedtypeconfig.js","src/trustedtypes.js","src/utils/wrapper.js","src/enforcer.js","src/polyfill/api_only.js","src/polyfill/full.js"],
"sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\n/**\n * A configuration object for trusted type enforcement.\n */\nexport class TrustedTypeConfig {\n  /**\n   * @param {boolean} isLoggingEnabled If true enforcement wrappers will log\n   *   violations to the console.\n   * @param {boolean} isEnforcementEnabled If true enforcement is enabled at\n   *   runtime.\n   * @param {?string} fallbackPolicyName If present, direct DOM sink usage\n   *   will be passed through this policy (has to be exposed).\n   * @param {Array<string>} allowedPolicyNames Whitelisted policy names.\n   * @param {boolean=} allowHttpUrls if true, HTTP(s) urls will be transparently\n   *   treated like TrustedURLs. Applied only if enforcement or logging is\n   *   enabled.\n   */\n  constructor(isLoggingEnabled,\n      isEnforcementEnabled,\n      fallbackPolicyName,\n      allowedPolicyNames,\n      allowHttpUrls = false) {\n    /**\n      * True if logging is enabled.\n      * @type {boolean}\n      */\n    this.isLoggingEnabled = isLoggingEnabled;\n\n    /**\n      * True if enforcement is enabled.\n      * @type {boolean}\n      */\n    this.isEnforcementEnabled = isEnforcementEnabled;\n\n    /**\n     * Fallback policy name\n     * @type {?string}\n     */\n    this.fallbackPolicyName = fallbackPolicyName;\n\n    /**\n     * Allowed policy names.\n     * @type {Array<string>}\n     */\n    this.allowedPolicyNames = allowedPolicyNames;\n\n    /**\n     * True if http(s) URLs should be implicitly treated as TrustedURLs.\n     * @type {boolean}\n     */\n    this.allowHttpUrls = allowHttpUrls;\n  }\n\n  /**\n   * Parses a CSP policy.\n   * @link https://www.w3.org/TR/CSP3/#parse-serialized-policy\n   * @param  {string} cspString String with a CSP definition.\n   * @return {Object<string,Array<string>>} Parsed CSP, keyed by directive\n   *   names.\n   */\n  static parseCSP(cspString) {\n    const SEMICOLON = /\\s*;\\s*/;\n    const WHITESPACE = /\\s+/;\n    return cspString.trim().split(SEMICOLON)\n        .map((serializedDirective) => serializedDirective.split(WHITESPACE))\n        .reduce(function(parsed, directive) {\n          if (directive[0]) {\n            parsed[directive[0]] = directive.slice(1).map((s) => s).sort();\n          }\n          return parsed;\n        }, {});\n  }\n\n  /**\n   * Creates a TrustedTypeConfig object from a CSP string.\n   * @param  {string} cspString\n   * @return {!TrustedTypeConfig}\n   */\n  static fromCSP(cspString) {\n    const ttDirective = 'trusted-types';\n    const isLoggingEnabled = true;\n    const policy = TrustedTypeConfig.parseCSP(cspString);\n    const enforce = ttDirective in policy;\n    let allowHttpUrls = false;\n    let policies = ['*'];\n    if (enforce) {\n      allowHttpUrls = policy[ttDirective].indexOf('\\'url-allow-http\\'') !== -1;\n      policies = policy[ttDirective].filter((p) => p.charAt(0) !== '\\'');\n    }\n\n    return new TrustedTypeConfig(\n      isLoggingEnabled,\n      enforce, /* isEnforcementEnabled */\n      null, /* fallbackPolicyName */\n      policies, /* allowedPolicyNames */\n      allowHttpUrls\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\n/* eslint-disable no-unused-vars */\n/**\n * @typedef {TrustedTypesPolicy}\n * @property {function(string):TrustedHTML} createHTML\n * @property {function(string):TrustedURL} createURL\n * @property {function(string):TrustedScriptURL} createScriptURL\n * @property {function(string):TrustedScript} createScript\n */\nlet TrustedTypesPolicy = {};\n\n/**\n * @typedef {TrustedTypesInnerPolicy}\n * @property {function(string):string} createHTML\n * @property {function(string):string} createURL\n * @property {function(string):string} createScriptURL\n * @property {function(string):string} createScript\n * @property {boolean} expose\n */\nlet TrustedTypesInnerPolicy = {};\n/* eslint-enable no-unused-vars */\n\n\nconst {apply} = Reflect;\nconst {hasOwnProperty} = Object.prototype;\n\nexport const trustedTypesBuilderTestOnly = function() {\n  // Capture common names early.\n  const {\n    assign, create, defineProperty, freeze, getOwnPropertyNames,\n    getPrototypeOf, prototype: ObjectPrototype,\n  } = Object;\n\n  const {\n    forEach, push,\n  } = Array.prototype;\n\n  const creatorSymbol = Symbol();\n\n  /**\n   * Getter for the privateMap.\n   * @param  {Object} obj Key of the privateMap\n   * @return {Object<string, string>} Private storage.\n   */\n  const privates = function(obj) {\n    let v = privateMap.get(obj);\n    if (v === undefined) {\n      v = create(null); // initialize the private storage.\n      privateMap.set(obj, v);\n    }\n    return v;\n  };\n\n  /**\n   * Called before attacker-controlled code on an internal collections,\n   * copies prototype members onto the instance directly, so that later\n   * changes to prototypes cannot expose collection internals.\n   * @param {!T} collection\n   * @return {!T} collection\n   * @template T\n   */\n  function selfContained(collection) {\n    const proto = getPrototypeOf(collection);\n    if (proto == null || getPrototypeOf(proto) !== ObjectPrototype) {\n      throw new Error(); // Loop below is insufficient.\n    }\n    for (let key of getOwnPropertyNames(proto)) {\n      defineProperty(collection, key, {value: collection[key]});\n    }\n    return collection;\n  }\n\n  /**\n   * Map for private properties of Trusted Types object.\n   * This is so that the access to the type constructor does not give\n   * the ability to create typed values.\n   * @type {WeakMap}\n   */\n  const privateMap = selfContained(new WeakMap());\n\n  /**\n   * List of all configured policy names.\n   * @type {Array<string>}\n   */\n  const policyNames = selfContained([]);\n\n  /**\n   * Map of all exposed policies, keyed by policy name.\n   * @type {Map<string,Object>}\n   */\n  const exposedPolicies = selfContained(new Map());\n\n  /**\n   * Allowed policy namess for policy names.\n   * @type {Array<string>}\n   */\n  const allowedNames = selfContained([]);\n\n  /**\n   * Whether to enforce allowedNames in createPolicy().\n   * @type {boolean}\n   */\n  let enforceNameWhitelist = false;\n\n\n  /**\n   * A value that is trusted to have certain security-relevant properties\n   * because the sources of such values are controlled.\n   */\n  class TrustedType {\n    /**\n     * Constructor for TrustedType. Only allowed to be called from within a\n     * policy.\n     * @param {symbol} s creatorSymbol\n     * @param {string} policyName The name of the policy this object was\n     *   created by.\n     */\n    constructor(s, policyName) {\n      // TODO: Figure out if symbol is needed, if the value is in privateMap.\n      if (s !== creatorSymbol) {\n        throw new Error('cannot call the constructor');\n      }\n      defineProperty(this, 'policyName',\n                     {value: '' + policyName, enumerable: true});\n    }\n\n    /**\n     * Returns the wrapped string value of the object.\n     * @return {string}\n     * @override\n     */\n    toString() {\n      return privates(this)['v'];\n    }\n\n    /**\n     * Returns the wrapped string value of the object.\n     * @return {string}\n     * @override\n     */\n    valueOf() {\n      return privates(this)['v'];\n    }\n  }\n\n  /**\n   * @param {function(new:TrustedType, symbol, string)} SubClass\n   * @param {string} canonName The class name which should be independent of\n   *     any renaming pass and which is relied upon by the enforcer and for\n   *     native type interop.\n   */\n  function lockdownTrustedType(SubClass, canonName) {\n    freeze(SubClass.prototype);\n    delete SubClass.name;\n    defineProperty(SubClass, 'name', {value: canonName});\n  }\n\n  /**\n   * Trusted URL object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedURL extends TrustedType {\n  }\n  lockdownTrustedType(TrustedURL, 'TrustedURL');\n\n  /**\n   * Trusted Script URL object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedScriptURL extends TrustedType {\n  }\n  lockdownTrustedType(TrustedScriptURL, 'TrustedScriptURL');\n\n  /**\n   * Trusted HTML object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedHTML extends TrustedType {\n  }\n  lockdownTrustedType(TrustedHTML, 'TrustedHTML');\n\n  /**\n   * Trusted Script object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedScript extends TrustedType {\n  }\n  lockdownTrustedType(TrustedScript, 'TrustedScript');\n\n  lockdownTrustedType(TrustedType, 'TrustedType');\n\n  /**\n   * Function generating a type checker.\n   * @template T\n   * @param  {T} type The type to check against.\n   * @return {function(*):boolean}\n   */\n  function isTrustedTypeChecker(type) {\n    return (obj) => (obj instanceof type) && privateMap.has(obj);\n  }\n\n  /**\n   * Function building a type from exposed policy\n   * @template T\n   * @param  {T} type        The type to build\n   * @param  {string} functionName Function name to call in a policy.\n   * @return {function(string,string):T} The type\n   */\n  function buildTypeFromExposedPolicy(type, functionName) {\n    return function(policyName, value) {\n      const policy = getExposedPolicy(policyName);\n      if (!(policy && apply(hasOwnProperty, policy, [functionName]))) {\n        throw new Error('Policy not found');\n      }\n      const policyFn = policy[functionName];\n      return policyFn(value);\n    };\n  }\n\n  /**\n   * Initial builder object for the policy.\n   * Its clone is passed to createPolicy builder function, with the expectation\n   * to modify its properties.\n   * @type {TrustedTypesInnerPolicy}\n   */\n  const initialBuilder = {\n    'createHTML': (s) => {\n      throw new Error('undefined conversion');\n    },\n    'createURL': (s) => {\n      throw new Error('undefined conversion');\n    },\n    'createScriptURL': (s) => {\n      throw new Error('undefined conversion');\n    },\n    'createScript': (s) => {\n      throw new Error('undefined conversion');\n    },\n    'expose': false, // Don't expose the policy by default.\n  };\n\n  /**\n   * Wraps a user-defined policy rules with TT constructor\n   * @param  {string} policyName The policy name\n   * @param  {TrustedTypesInnerPolicy} innerPolicy InnerPolicy\n   * @return {!TrustedTypesPolicy} Frozen policy object\n   */\n  function wrapPolicy(policyName, innerPolicy) {\n    /**\n     * @template T\n     * @param {function(new:T, symbol, string)} Ctor a trusted type constructor\n     * @param {string} methodName the policy factory method name\n     * @return {function(string):!T} a factory that produces instances of Ctor.\n     */\n    function creator(Ctor, methodName) {\n      // This causes thisValue to be null when called below.\n      const method = innerPolicy[methodName];\n      const policySpecificType = freeze(new Ctor(creatorSymbol, policyName));\n      const factory = {\n        [methodName](s) { // Trick to get methodName to show in stacktrace.\n          const o = freeze(create(policySpecificType));\n          privates(o)['v'] = '' + method(s);\n          return o;\n        },\n      }[methodName];\n      return freeze(factory);\n    }\n\n    return freeze({\n      'createHTML': creator(TrustedHTML, 'createHTML'),\n      'createScriptURL': creator(TrustedScriptURL, 'createScriptURL'),\n      'createURL': creator(TrustedURL, 'createURL'),\n      'createScript': creator(TrustedScript, 'createScript'),\n    });\n  }\n\n  /**\n   * Returns a policy object, if given policy was exposed.\n   * @param  {string} name\n   * @return {?TrustedTypesPolicy}\n   */\n  function getExposedPolicy(name) {\n    const pName = '' + name;\n    return exposedPolicies.get(pName) || null;\n  }\n\n  /**\n   * Returns all configured policy names (even for non-exposed policies).\n   * @return {!Array<string>}\n   */\n  function getPolicyNames() {\n    // TODO(msamuel): Should we sort policyNames to avoid leaking or\n    // encouraging dependency on the order in which policy names are\n    // registered?  I think JavaScript builtin sorts are efficient for\n    // almost-sorted lists so the amortized cost is close to O(n).\n    return policyNames.slice();\n  }\n\n  /**\n   * Creates a TT policy.\n   *\n   * Returns a frozen object representing a policy - a collection of functions\n   * that may create TT objects based on the user-provided rules specified\n   * in the builder function.\n   *\n   * @param  {string} name A unique name of the policy.\n   * @param  {function(TrustedTypesInnerPolicy)} builder Function that defines\n   *   policy rules by modifying the initial policy object passed.\n   * @return {TrustedTypesPolicy} The policy that may create TT objects\n   *   according to the rules in the builder.\n   * @todo Figure out if the return value (and the builder) can be typed.\n   */\n  function createPolicy(name, builder) {\n    const pName = '' + name; // Assert it's a string\n\n    if (enforceNameWhitelist && allowedNames.indexOf(pName) === -1) {\n      throw new Error('Policy ' + pName + ' disallowed.');\n    }\n\n    if (policyNames.indexOf(pName) !== -1) {\n      throw new Error('Policy ' + pName + ' exists.');\n    }\n    // Register the name early so that if builder unwisely calls\n    // across protection domains to code that reenters this function,\n    // builder's author still has rights to the name.\n    policyNames.push(pName);\n\n    const innerPolicy = assign(create(null), initialBuilder);\n    builder(innerPolicy);\n    freeze(innerPolicy);\n\n    const policy = wrapPolicy(pName, innerPolicy);\n\n    if (innerPolicy['expose']) {\n      exposedPolicies.set(pName, policy);\n    }\n\n    return policy;\n  }\n\n  /**\n   * Applies the policy name whitelist.\n   * @param {!Array<string>} allowedPolicyNames\n   */\n  function setAllowedPolicyNames(allowedPolicyNames) {\n    if (allowedPolicyNames.indexOf('*') !== -1) { // Any policy name is allowed.\n      enforceNameWhitelist = false;\n    } else {\n      enforceNameWhitelist = true;\n      allowedNames.length = 0;\n      forEach.call(allowedPolicyNames, (el) => {\n        push.call(allowedNames, '' + el);\n      });\n    }\n  }\n\n  // TODO: Figure out if it's safe to return an instance of a typed object\n  // to make testing easier.\n  return freeze({\n\n    // Types definition, for convenience of instanceof checks\n    TrustedHTML,\n    TrustedURL,\n    TrustedScriptURL,\n    TrustedScript,\n\n    // Type builders from exposed policies, for convenience. Consider removing?\n    createHTML: buildTypeFromExposedPolicy(TrustedHTML, 'createHTML'),\n    createURL: buildTypeFromExposedPolicy(TrustedURL, 'createURL'),\n    createScriptURL: buildTypeFromExposedPolicy(TrustedScriptURL,\n        'createScriptURL'),\n    createScript: buildTypeFromExposedPolicy(TrustedScript, 'createScript'),\n\n    // The main function to create policies.\n    createPolicy,\n\n    // Policy getter\n    getExposedPolicy,\n\n    getPolicyNames,\n\n    // Below methods are not part of the public API and are only needed in the\n    // polyfill.\n\n    // Type checkers, also validating the object was initialized through a\n    // policy.\n    isHTML: isTrustedTypeChecker(TrustedHTML),\n    isURL: isTrustedTypeChecker(TrustedURL),\n    isScriptURL: isTrustedTypeChecker(TrustedScriptURL),\n    isScript: isTrustedTypeChecker(TrustedScript),\n\n    setAllowedPolicyNames,\n  });\n};\n\nexport const TrustedTypes = trustedTypesBuilderTestOnly();\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\nconst {\n  defineProperty,\n} = Object;\n\n/**\n * Installs the setter of a given property.\n * @param {!Object} object An object for which to wrap the property.\n * @param {string} name The name of the property to wrap.\n * @param {function(*): *|undefined} setter A setter function}\n */\nexport function installSetter(object, name, setter) {\n  const descriptor = {\n    set: setter,\n  };\n  defineProperty(object, name, descriptor);\n}\n\n/**\n * Installs a setter and getter of a given property.\n * @param {!Object} object An object for which to wrap the property.\n * @param {string} name The name of the property to wrap.\n * @param {function(*): *|undefined} setter A setter function}\n * @param {function(*): *|undefined} getter A getter function}\n */\nexport function installSetterAndGetter(object, name, setter, getter) {\n  const descriptor = {\n    set: setter,\n    get: getter,\n    configurable: true, // This can get uninstalled, we need configurable: true\n  };\n  defineProperty(object, name, descriptor);\n}\n\n/**\n * Installs the setter of a given property.\n * @param {!Object} object An object for which to wrap the property.\n * @param {string} name The name of the property to wrap.\n * @param {function(*): *|undefined} fn A function}\n */\nexport function installFunction(object, name, fn) {\n  defineProperty(object, name, {\n    value: fn,\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\n/* eslint-disable no-unused-vars */\nimport {TrustedTypeConfig} from './data/trustedtypeconfig.js';\nimport {TrustedTypes} from './trustedtypes.js';\n\n/* eslint-enable no-unused-vars */\nimport {installFunction, installSetter, installSetterAndGetter}\n  from './utils/wrapper.js';\n\nconst {apply} = Reflect;\nconst {\n  getOwnPropertyNames,\n  getOwnPropertyDescriptor,\n  hasOwnProperty,\n  getPrototypeOf,\n  isPrototypeOf,\n} = Object;\n\n/**\n * A map of attribute names to allowed types.\n * @type {!Object<string, !Object<string, !Function>>}\n */\nlet SET_ATTRIBUTE_TYPE_MAP = {\n  // TODO(slekies): Add SVG Elements here\n  // TODO(koto): Figure out what to to with <link>\n  'HTMLAnchorElement': {\n    'href': TrustedTypes.TrustedURL,\n  },\n  'HTMLAreaElement': {\n    'href': TrustedTypes.TrustedURL,\n  },\n  'HTMLBaseElement': {\n    'href': TrustedTypes.TrustedURL,\n  },\n  'HTMLButtonElement': {\n    'formaction': TrustedTypes.TrustedURL,\n  },\n  'HTMLSourceElement': {\n    'src': TrustedTypes.TrustedURL,\n  },\n  'HTMLImageElement': {\n    'src': TrustedTypes.TrustedURL,\n    // TODO(slekies): add special handling for srcset\n  },\n  'HTMLTrackElement': {\n    'src': TrustedTypes.TrustedURL,\n  },\n  'HTMLMediaElement': {\n    'src': TrustedTypes.TrustedURL,\n  },\n  'HTMLInputElement': {\n    'src': TrustedTypes.TrustedURL,\n    'formaction': TrustedTypes.TrustedURL,\n  },\n  'HTMLFrameElement': {\n    'src': TrustedTypes.TrustedURL,\n  },\n  'HTMLIFrameElement': {\n    'src': TrustedTypes.TrustedURL,\n    'srcdoc': TrustedTypes.TrustedHTML,\n  },\n  'HTMLLinkElement': {\n    'href': TrustedTypes.TrustedScriptURL,\n  },\n  'HTMLObjectElement': {\n    'data': TrustedTypes.TrustedScriptURL,\n    'codebase': TrustedTypes.TrustedScriptURL,\n  },\n  'HTMLEmbedElement': {\n    'src': TrustedTypes.TrustedScriptURL,\n  },\n  'HTMLScriptElement': {\n    'src': TrustedTypes.TrustedScriptURL,\n    'text': TrustedTypes.TrustedScript,\n  },\n  'HTMLElement': {\n  },\n};\n\n// Add inline event handlers property names.\nfor (let name of getOwnPropertyNames(HTMLElement.prototype)) {\n  if (name.slice(0, 2) === 'on') {\n    SET_ATTRIBUTE_TYPE_MAP['HTMLElement'][name] = TrustedTypes.TrustedScript;\n  }\n}\n\n/**\n * Map of type names to type checking function.\n * @type {!Object<string,!Function>}\n */\nconst TYPE_CHECKER_MAP = {\n  'TrustedHTML': TrustedTypes.isHTML,\n  'TrustedURL': TrustedTypes.isURL,\n  'TrustedScriptURL': TrustedTypes.isScriptURL,\n  'TrustedScript': TrustedTypes.isScript,\n};\n\n/**\n * Map of type names to type producing function.\n * @type {Object<string,!Function>}\n */\nconst TYPE_PRODUCER_MAP = {\n  'TrustedHTML': TrustedTypes.createHTML,\n  'TrustedURL': TrustedTypes.createURL,\n  'TrustedScriptURL': TrustedTypes.createScriptURL,\n  'TrustedScript': TrustedTypes.createScript,\n};\n\n/**\n * A map of HTML attribute to element property names.\n * @type {!Object<string, string>}\n */\nconst ATTR_PROPERTY_MAP = {\n  'codebase': 'codeBase',\n  'formaction': 'formAction',\n};\n\n/**\n * An object for enabling trusted type enforcement.\n */\nexport class TrustedTypesEnforcer {\n  /**\n   * @param {!TrustedTypeConfig} config The configuration for\n   * trusted type enforcement.\n   */\n  constructor(config) {\n    /**\n     * A configuration for the trusted type enforcement.\n     * @private {!TrustedTypeConfig}\n     */\n    this.config_ = config;\n    /**\n     * @private {Object<string, function(*): *|undefined>}\n     */\n    this.originalSetters_ = {};\n  }\n\n  /**\n   * Wraps HTML sinks with an enforcement setter, which will enforce\n   * trusted types and do logging, if enabled.\n   *\n   */\n  install() {\n    TrustedTypes.setAllowedPolicyNames(this.config_.allowedPolicyNames);\n\n    if (!this.config_.isEnforcementEnabled && !this.config_.isLoggingEnabled) {\n      return;\n    }\n\n    this.wrapSetter_(Element.prototype, 'innerHTML', TrustedTypes.TrustedHTML);\n    this.wrapSetter_(Element.prototype, 'outerHTML', TrustedTypes.TrustedHTML);\n    this.wrapWithEnforceFunction_(Range.prototype, 'createContextualFragment',\n        TrustedTypes.TrustedHTML, 0);\n    this.wrapWithEnforceFunction_(Element.prototype, 'insertAdjacentHTML',\n        TrustedTypes.TrustedHTML, 1);\n\n    if (getOwnPropertyDescriptor(Document.prototype, 'write')) {\n      // Chrome\n      this.wrapWithEnforceFunction_(Document.prototype, 'write',\n          TrustedTypes.TrustedHTML, 0);\n    } else {\n      // Firefox\n      this.wrapWithEnforceFunction_(HTMLDocument.prototype, 'write',\n        TrustedTypes.TrustedHTML, 0);\n    }\n\n    this.wrapWithEnforceFunction_(window, 'open', TrustedTypes.TrustedURL, 0);\n    if (DOMParser) {\n      this.wrapWithEnforceFunction_(DOMParser.prototype, 'parseFromString',\n          TrustedTypes.TrustedHTML, 0);\n    }\n    this.wrapSetAttribute_();\n    this.installScriptWrappers_();\n    this.installPropertySetWrappers_();\n  }\n\n  /**\n   * Removes the original setters.\n   */\n  uninstall() {\n    TrustedTypes.setAllowedPolicyNames(['*']);\n\n    if (!this.config_.isEnforcementEnabled && !this.config_.isLoggingEnabled) {\n      return;\n    }\n\n    this.restoreSetter_(Element.prototype, 'innerHTML');\n    this.restoreSetter_(Element.prototype, 'outerHTML');\n    this.restoreFunction_(Range.prototype, 'createContextualFragment');\n    this.restoreFunction_(Element.prototype, 'insertAdjacentHTML');\n    this.restoreFunction_(Element.prototype, 'setAttribute');\n    this.restoreFunction_(Element.prototype, 'setAttributeNS');\n\n    if (getOwnPropertyDescriptor(Document.prototype, 'write')) {\n      this.restoreFunction_(Document.prototype, 'write');\n    } else {\n      this.restoreFunction_(HTMLDocument.prototype, 'write');\n    }\n    this.restoreFunction_(window, 'open');\n    if (DOMParser) {\n      this.restoreFunction_(DOMParser.prototype, 'parseFromString');\n    }\n    this.uninstallPropertySetWrappers_();\n    this.uninstallScriptWrappers_();\n  }\n\n  /**\n   * Installs wrappers for setting properties of script elements.\n   */\n  installScriptWrappers_() {\n    // HTMLScript element has no own setters for crucial properties, we have to\n    // reuse ones from HTMLElement.\n    this.wrapSetter_(HTMLScriptElement.prototype, 'innerText',\n        TrustedTypes.TrustedScript, HTMLElement.prototype);\n    this.wrapSetter_(HTMLScriptElement.prototype, 'textContent',\n        TrustedTypes.TrustedScript, Node.prototype);\n  }\n\n  /**\n   * Uninstalls wrappers for setting properties of script elements.\n   */\n  uninstallScriptWrappers_() {\n    this.restoreSetter_(HTMLScriptElement.prototype, 'innerText',\n        HTMLElement.prototype);\n    this.restoreSetter_(HTMLScriptElement.prototype, 'textContent',\n        Node.prototype);\n  }\n\n  /**\n   * Installs wrappers for directly setting properties\n   * based on SET_ATTRIBUTE_TYPE_MAP.\n   * @private\n   */\n  installPropertySetWrappers_() {\n    /* eslint-disable guard-for-in */\n    for (let type of getOwnPropertyNames(SET_ATTRIBUTE_TYPE_MAP)) {\n      for (let attribute of getOwnPropertyNames(SET_ATTRIBUTE_TYPE_MAP[type])) {\n        const property = apply(hasOwnProperty, ATTR_PROPERTY_MAP, [attribute]) ?\n              ATTR_PROPERTY_MAP[attribute] : attribute;\n        this.wrapSetter_(window[type].prototype, property,\n                         SET_ATTRIBUTE_TYPE_MAP[type][attribute]);\n      }\n    }\n  }\n\n  /**\n   * Uninstalls wrappers for directly setting properties\n   * based on SET_ATTRIBUTE_TYPE_MAP.\n   * @private\n   */\n  uninstallPropertySetWrappers_() {\n    /* eslint-disable guard-for-in */\n    for (let type of getOwnPropertyNames(SET_ATTRIBUTE_TYPE_MAP)) {\n      for (let attribute of getOwnPropertyNames(SET_ATTRIBUTE_TYPE_MAP[type])) {\n        const property = attribute in ATTR_PROPERTY_MAP ?\n              ATTR_PROPERTY_MAP[attribute] : attribute;\n        this.restoreSetter_(window[type].prototype, property);\n      }\n    }\n  }\n\n  /** Wraps set attribute with an enforcement function. */\n  wrapSetAttribute_() {\n    let that = this;\n    this.wrapFunction_(\n        Element.prototype,\n        'setAttribute',\n        /**\n         * @this {TrustedTypesEnforcer}\n         * @param {function(!Function, ...*)} originalFn\n         * @return {*}\n         */\n        function(originalFn, ...args) {\n          return that.setAttributeWrapper_\n              .bind(that, this, originalFn)\n              .apply(that, args);\n        });\n    this.wrapFunction_(\n      Element.prototype,\n      'setAttributeNS',\n      /**\n         * @this {TrustedTypesEnforcer}\n         * @param {function(!Function, ...*)} originalFn\n         * @return {*}\n         */\n        function(originalFn, ...args) {\n          return that.setAttributeNSWrapper_\n              .bind(that, this, originalFn)\n              .apply(that, args);\n        });\n  }\n\n  /**\n   * Returns the required type for the setAtrtibute call.\n   * @param  {!Object} context The object to infer the type of attribute of.\n   * @param  {string} attrName The attribute name.\n   * @return {Function} The type to enforce, or null if no contract is found.\n   */\n  getRequiredTypeForAttribute_(context, attrName) {\n      let ctor = context.constructor;\n      do {\n        let type = ctor && ctor.name &&\n            SET_ATTRIBUTE_TYPE_MAP[ctor.name] &&\n            SET_ATTRIBUTE_TYPE_MAP[ctor.name][attrName];\n\n        if (type || ctor == HTMLElement) {\n          // Stop at HTMLElement.\n          return type;\n        }\n        // Explore the prototype chain.\n      } while (ctor = getPrototypeOf(ctor));\n\n      return null;\n  }\n\n  /**\n   * Enforces type checking for Element.prototype.setAttribute.\n   * @param {!Object} context The context for the call to the original function.\n   * @param {!Function} originalFn The original setAttribute function.\n   * @return {*}\n   */\n  setAttributeWrapper_(context, originalFn, ...args) {\n    // Note(slekies): In a normal application constructor should never be null.\n    // However, there are no guarantees. If the constructor is null, we cannot\n    // determine whether a special type is required. In order to not break the\n    // application, we will not do any further type checks and pass the call\n    // to setAttribute.\n    if (context.constructor !== null) {\n      let attrName = (args[0] = String(args[0])).toLowerCase();\n      let type = this.getRequiredTypeForAttribute_(context, attrName);\n\n      if (type instanceof Function) {\n        return this.enforce_(\n          context, 'setAttribute', type, originalFn, 1, args);\n      }\n    }\n\n    return originalFn.apply(context, args);\n  }\n\n  /**\n   * Enforces type checking for Element.prototype.setAttributeNS.\n   * @param {!Object} context The context for the call to the original function.\n   * @param {!Function} originalFn The original setAttributeNS function.\n   * @return {*}\n   */\n  setAttributeNSWrapper_(context, originalFn, ...args) {\n    /**\n     * @param {string} ns the namespace URL.\n     * @return {boolean} true iff the given argument is an HTML namespace.\n     */\n    function isHtmlNamespace(ns) {\n      return true; // TODO(msamuel): implement me\n    }\n    // See the note from setAttributeWrapper_ above.\n    if (context.constructor !== null) {\n      let ns = (args[0] = String(args[0])).toLowerCase();\n      let attrName = (args[1] = String(args[1])).toLowerCase();\n      if (isHtmlNamespace(ns)) {\n        let type = context.constructor && context.constructor.name &&\n            SET_ATTRIBUTE_TYPE_MAP[context.constructor.name] &&\n            SET_ATTRIBUTE_TYPE_MAP[context.constructor.name][attrName];\n\n        if (type instanceof Function) {\n          return this.enforce_(\n            context, 'setAttributeNS', type, originalFn, 2, args);\n        }\n      }\n      // TODO(msamuel): handle SVG namespace.  See TODO(slekies) above.\n    }\n\n    return originalFn.apply(context, args);\n  }\n\n\n  /**\n   * Wraps a setter with the enforcement wrapper.\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @param {!Function} type The type to enforce.\n   * @param {number} argNumber Number of the argument to enforce the type of.\n   * @private\n   */\n  wrapWithEnforceFunction_(object, name, type, argNumber) {\n    let that = this;\n    this.wrapFunction_(\n        object,\n        name,\n        /**\n         * @this {TrustedTypesEnforcer}\n         * @param {function(!Function, ...*)} originalFn\n         * @return {*}\n         */\n        function(originalFn, ...args) {\n          return that.enforce_.call(that, this, name, type, originalFn,\n                                    argNumber, args);\n        });\n  }\n\n\n  /**\n   * Wraps an existing function with a given function body and stores the\n   * original function.\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @param {function(!Function, ...*)} functionBody The wrapper function.\n   */\n  wrapFunction_(object, name, functionBody) {\n    let descriptor = getOwnPropertyDescriptor(object, name);\n    let originalFn = /** @type function(*):* */ (\n        descriptor ? descriptor.value : null);\n\n    if (!(originalFn instanceof Function)) {\n      throw new TypeError(\n          'Property ' + name + ' on object' + object + ' is not a function');\n    }\n\n    let key = this.getKey_(object, name);\n    if (this.originalSetters_[key]) {\n      throw new Error('TrustedTypesEnforcer: Double installation detected');\n    }\n    installFunction(\n        object,\n        name,\n        /**\n         * @this {TrustedTypesEnforcer}\n         * @return {*}\n         */\n        function(...args) {\n          return functionBody.bind(this, originalFn).apply(this, args);\n        });\n    this.originalSetters_[key] = originalFn;\n  }\n\n  /**\n   * Wraps a setter with the enforcement wrapper.\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @param {!Function} type The type to enforce.\n   * @param {!Object=} descriptorObject If present, will reuse the\n   *   setter/getter from this one, instead of object. Used for redefining\n   *   setters in subclasses.\n   * @private\n   */\n  wrapSetter_(object, name, type, descriptorObject = undefined) {\n    if (descriptorObject && !isPrototypeOf.call(descriptorObject, object)) {\n      throw new Error('Invalid prototype chain');\n    }\n\n    let useObject = descriptorObject || object;\n\n    let descriptor = getOwnPropertyDescriptor(useObject, name);\n\n    let originalSetter = /** @type {function(*):*} */ (descriptor ?\n        descriptor.set : null);\n\n    if (!(originalSetter instanceof Function)) {\n      throw new TypeError(\n          'No setter for property ' + name + ' on object' + object);\n    }\n\n    let key = this.getKey_(object, name);\n    if (this.originalSetters_[key]) {\n      throw new Error('TrustedTypesEnforcer: Double installation detected');\n    }\n    let that = this;\n    /**\n     * @this {TrustedTypesEnforcer}\n     * @param {*} value\n     */\n    let enforcingSetter = function(value) {\n          that.enforce_.call(that, this, name, type, originalSetter, 0,\n                             [value]);\n        };\n\n    if (useObject === object) {\n      installSetter(\n          object,\n          name,\n          enforcingSetter);\n    } else {\n      // Since we're creating a new setter in subclass, we also need to\n      // overwrite the getter.\n      installSetterAndGetter(\n          object,\n          name,\n          enforcingSetter,\n          descriptor.get\n      );\n    }\n    this.originalSetters_[key] = originalSetter;\n  }\n\n  /**\n   * Restores the original setter for the property, as encountered during\n   * install().\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @param {!Object=} descriptorObject If present, will restore the original\n   *   setter/getter from this one, instead of object.\n   * @private\n   */\n  restoreSetter_(object, name, descriptorObject = undefined) {\n    let key = this.getKey_(object, name);\n    if (descriptorObject && !isPrototypeOf.call(descriptorObject, object)) {\n      throw new Error('Invalid prototype chain');\n    }\n    if (!this.originalSetters_[key]) {\n      throw new Error(\n          'TrustedTypesEnforcer: Cannot restore (double uninstallation?)');\n    }\n    if (descriptorObject) {\n      // We have to also overwrite a getter.\n      installSetterAndGetter(object, name, this.originalSetters_[key],\n          getOwnPropertyDescriptor(descriptorObject, name).get);\n    } else {\n      installSetter(object, name, this.originalSetters_[key]);\n    }\n    delete this.originalSetters_[key];\n  }\n\n  /**\n   * Restores the original method of an object, as encountered during install().\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @private\n   */\n  restoreFunction_(object, name) {\n    let key = this.getKey_(object, name);\n    if (!this.originalSetters_[key]) {\n      throw new Error(\n          'TrustedTypesEnforcer: Cannot restore (double uninstallation?)');\n    }\n    installFunction(object, name, this.originalSetters_[key]);\n    delete this.originalSetters_[key];\n  }\n\n  /**\n   * Returns the key name for caching original setters.\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @return {string} Key name.\n   * @private\n   */\n  getKey_(object, name) {\n    // TODO(msamuel): Can we use Object.prototype.toString.call(object)\n    // to get an unspoofable string here?\n    // TODO(msamuel): fail on '-' in object.constructor.name?\n    return '' + object.constructor.name + '-' + name;\n  }\n\n  /**\n   * @param  {string}  url The URL to check.\n   * @return {boolean} True iff the value is a http(s) URL.\n   * @private\n   */\n  isHttpUrl_(url) {\n    const parsedUrl = new URL(url, document.baseURI || undefined);\n    return parsedUrl.protocol == 'http:' || parsedUrl.protocol == 'https:';\n  }\n\n  /**\n   * Logs and enforces TrustedTypes depending on the given configuration.\n   * @template T\n   * @param {!Object} context The object that the setter is called for.\n   * @param {string} propertyName The name of the property.\n   * @param {!Function} typeToEnforce The type to enforce.\n   * @param {function(?):T} originalSetter Original setter.\n   * @param {number} argNumber Number of argument to enforce the type of.\n   * @param {Array} args Arguments.\n   * @return {T}\n   * @private\n   */\n  enforce_(context, propertyName, typeToEnforce, originalSetter, argNumber,\n           args) {\n    let value = args[argNumber];\n    const typeName = '' + typeToEnforce.name;\n    // If typed value is given, pass through.\n    if (TYPE_CHECKER_MAP.hasOwnProperty(typeName) &&\n        TYPE_CHECKER_MAP[typeName](value)) {\n      return apply(originalSetter, context, args);\n    }\n\n    // If function (instead of string) is passed to inline event attribute,\n    // pass through.\n    if (typeToEnforce === TrustedTypes.TrustedScript &&\n        propertyName.slice(0, 2) === 'on' &&\n        value === null || typeof value === 'function') {\n      return apply(originalSetter, context, args);\n    }\n\n    // Apply url-allow-http\n    if (typeToEnforce === TrustedTypes.TrustedURL &&\n        this.config_.allowHttpUrls) {\n      const url = '' + value;\n      if (this.isHttpUrl_(url)) {\n        args[argNumber] = url;\n        return apply(originalSetter, context, args);\n      }\n    }\n\n    // Apply a fallback policy, if it exists.\n    const fallback = this.config_.fallbackPolicyName;\n    if (fallback && TrustedTypes.getPolicyNames().indexOf(fallback) !== -1) {\n      let fallbackValue = TYPE_PRODUCER_MAP[typeName](fallback, value);\n      if (TYPE_CHECKER_MAP.hasOwnProperty(typeName) &&\n          TYPE_CHECKER_MAP[typeName](fallbackValue)) {\n        args[argNumber] = fallbackValue;\n        return apply(originalSetter, context, args);\n      }\n    }\n\n    let message = 'Failed to set ' + propertyName + ' property on ' +\n        ('' + context || context.constructor.name) +\n        ': This document requires `' + (typeToEnforce.name) + '` assignment.';\n\n    if (this.config_.isLoggingEnabled) {\n      // eslint-disable-next-line no-console\n      console.warn(message, propertyName, context, typeToEnforce, value);\n    }\n\n    if (this.config_.isEnforcementEnabled) {\n      throw new TypeError(message);\n    } else { // pass-through\n      return apply(originalSetter, context, args);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\n/**\n * @fileoverview Entry point for a polyfill that only defines the types\n * (i.e. no enforcement logic).\n */\nimport {TrustedTypes} from '../trustedtypes.js';\n\nconst tt = TrustedTypes;\n\n// Make sure Closure compiler exposes the names.\nif (typeof window !== 'undefined' &&\n    typeof window['TrustedTypes'] === 'undefined') {\n  window['TrustedTypes'] = {\n    'TrustedHTML': tt.TrustedHTML,\n    'TrustedURL': tt.TrustedURL,\n    'TrustedScriptURL': tt.TrustedScriptURL,\n    'TrustedScript': tt.TrustedScript,\n    'createHTML': tt.createHTML,\n    'createURL': tt.createURL,\n    'createScriptURL': tt.createScriptURL,\n    'createScript': tt.createScript,\n    'createPolicy': tt.createPolicy,\n    'getExposedPolicy': tt.getExposedPolicy,\n    'getPolicyNames': tt.getPolicyNames,\n  };\n}\n\nexport default tt;\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\n/**\n * @fileoverview Entry point for a polyfill that enforces the types.\n */\nimport {TrustedTypesEnforcer} from '../enforcer.js';\nimport {TrustedTypeConfig} from '../data/trustedtypeconfig.js';\n/* eslint-disable no-unused-vars */\nimport TrustedTypes from './api_only.js';\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Tries to guess a CSP policy from:\n *  - the current polyfill script element text content (if prefixed with\n *    \"Content-Security-Policy:\")\n *  - the data-csp attribute value of the current script element.\n *  - meta header\n * @return {?string} Guessed CSP value, or null.\n */\nfunction detectPolicy() {\n    try {\n        const currentScript = document.currentScript || (function() {\n          let scripts = document.getElementsByTagName('script');\n          return scripts[scripts.length - 1];\n        })();\n\n        const bodyPrefix = 'Content-Security-Policy:';\n        if (currentScript &&\n            currentScript.textContent.trim().substr(0, bodyPrefix.length) ==\n                bodyPrefix) {\n            return currentScript.textContent.trim().slice(bodyPrefix.length);\n        }\n        if (currentScript.dataset['csp']) {\n            return currentScript.dataset['csp'];\n        }\n        const cspInMeta = document.head.querySelector(\n            'meta[http-equiv^=\"Content-Security-Policy\"]');\n        if (cspInMeta) {\n            return cspInMeta['content'].trim();\n        }\n    } catch (e) {\n        return null;\n    }\n    return null;\n}\n\n/**\n * Bootstraps all trusted types polyfill and their enforcement.\n */\nexport function bootstrap() {\n  const csp = detectPolicy();\n  const config = csp ? TrustedTypeConfig.fromCSP(csp) : new TrustedTypeConfig(\n    /* isLoggingEnabled */ false,\n    /* isEnforcementEnabled */ false,\n    /* fallbackPolicyName */ null,\n    /* allowedPolicyNames */ ['*']);\n\n  const trustedTypesEnforcer = new TrustedTypesEnforcer(config);\n\n  trustedTypesEnforcer.install();\n}\n\nbootstrap();\n"],
"names":["TrustedTypeConfig","isLoggingEnabled","isEnforcementEnabled","fallbackPolicyName","allowedPolicyNames","allowHttpUrls","cspString","WHITESPACE","trim","split","SEMICOLON","map","serializedDirective","reduce","parsed","directive","slice","s","sort","policy","parseCSP","enforce","ttDirective","policies","indexOf","filter","p","charAt","apply","Reflect","hasOwnProperty","Object","prototype","TrustedTypes","trustedTypesBuilderTestOnly","privates","obj","v","privateMap","get","undefined","create","set","selfContained","collection","proto","getPrototypeOf","ObjectPrototype","Error","key","getOwnPropertyNames","defineProperty","value","lockdownTrustedType","SubClass","canonName","freeze","name","isTrustedTypeChecker","type","has","buildTypeFromExposedPolicy","functionName","policyName","getExposedPolicy","policyFn","wrapPolicy","innerPolicy","creator","Ctor","methodName","method","policySpecificType","creatorSymbol","o","factory","TrustedHTML","TrustedScriptURL","TrustedURL","TrustedScript","exposedPolicies","assign","forEach","push","Array","Symbol","WeakMap","policyNames","Map","allowedNames","enforceNameWhitelist","TrustedType","enumerable","initialBuilder","createHTML","createURL","createScriptURL","createScript","createPolicy","builder","pName","getPolicyNames","isHTML","isURL","isScriptURL","isScript","setAllowedPolicyNames","length","call","el","installFunction","object","fn","getOwnPropertyDescriptor","isPrototypeOf","SET_ATTRIBUTE_TYPE_MAP","HTMLElement","TYPE_CHECKER_MAP","TYPE_PRODUCER_MAP","ATTR_PROPERTY_MAP","TrustedTypesEnforcer","config","config_","originalSetters_","wrapSetter_","Element","wrapWithEnforceFunction_","Range","Document","HTMLDocument","window","DOMParser","wrapSetAttribute_","installScriptWrappers_","installPropertySetWrappers_","HTMLScriptElement","Node","attribute","property","that","wrapFunction_","originalFn","args","setAttributeWrapper_","bind","setAttributeNSWrapper_","context","attrName","ctor","constructor","toLowerCase","String","getRequiredTypeForAttribute_","Function","enforce_","argNumber","functionBody","descriptor","TypeError","getKey_","descriptorObject","enforcingSetter","originalSetter","useObject","configurable","url","parsedUrl","URL","document","baseURI","protocol","propertyName","typeToEnforce","typeName","isHttpUrl_","fallback","fallbackValue","message","console","warn","csp","detectPolicy","currentScript","scripts","getElementsByTagName","bodyPrefix","textContent","substr","dataset","cspInMeta","head","querySelector","e","fromCSP","install","trustedTypesEnforcer"]
}
