{
"version":3,
"file":"trustedtypes.build.js",
"lineCount":24,
"mappings":"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",
"sources":["src/data/trustedtypeconfig.js","src/trustedtypes.js","src/utils/wrapper.js","src/enforcer.js","src/polyfill/api_only.js","src/polyfill/full.js"],
"sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\n/**\n * CSP Directive name controlling Trusted Types behavior.\n * @type {string}\n */\nexport const DIRECTIVE_NAME = 'trusted-types';\n\n/**\n * A configuration object for trusted type enforcement.\n */\nexport class TrustedTypeConfig {\n  /**\n   * @param {boolean} isLoggingEnabled If true enforcement wrappers will log\n   *   violations to the console.\n   * @param {boolean} isEnforcementEnabled If true enforcement is enabled at\n   *   runtime.\n   * @param {?string} fallbackPolicyName If present, direct DOM sink usage\n   *   will be passed through this policy (has to be exposed).\n   * @param {Array<string>} allowedPolicyNames Whitelisted policy names.\n   * @param {boolean=} allowHttpUrls if true, HTTP(s) urls will be transparently\n   *   treated like TrustedURLs. Applied only if enforcement or logging is\n   *   enabled.\n   * @param {?string} cspString String with the CSP policy.\n   */\n  constructor(isLoggingEnabled,\n      isEnforcementEnabled,\n      fallbackPolicyName,\n      allowedPolicyNames,\n      allowHttpUrls = false,\n      cspString = null) {\n    /**\n      * True if logging is enabled.\n      * @type {boolean}\n      */\n    this.isLoggingEnabled = isLoggingEnabled;\n\n    /**\n      * True if enforcement is enabled.\n      * @type {boolean}\n      */\n    this.isEnforcementEnabled = isEnforcementEnabled;\n\n    /**\n     * Fallback policy name\n     * @type {?string}\n     */\n    this.fallbackPolicyName = fallbackPolicyName;\n\n    /**\n     * Allowed policy names.\n     * @type {Array<string>}\n     */\n    this.allowedPolicyNames = allowedPolicyNames;\n\n    /**\n     * True if http(s) URLs should be implicitly treated as TrustedURLs.\n     * @type {boolean}\n     */\n    this.allowHttpUrls = allowHttpUrls;\n\n    /**\n     * CSP string that defined the policy.\n     * @type {?string}\n     */\n    this.cspString = cspString;\n  }\n\n  /**\n   * Parses a CSP policy.\n   * @link https://www.w3.org/TR/CSP3/#parse-serialized-policy\n   * @param  {string} cspString String with a CSP definition.\n   * @return {Object<string,Array<string>>} Parsed CSP, keyed by directive\n   *   names.\n   */\n  static parseCSP(cspString) {\n    const SEMICOLON = /\\s*;\\s*/;\n    const WHITESPACE = /\\s+/;\n    return cspString.trim().split(SEMICOLON)\n        .map((serializedDirective) => serializedDirective.split(WHITESPACE))\n        .reduce(function(parsed, directive) {\n          if (directive[0]) {\n            parsed[directive[0]] = directive.slice(1).map((s) => s).sort();\n          }\n          return parsed;\n        }, {});\n  }\n\n  /**\n   * Creates a TrustedTypeConfig object from a CSP string.\n   * @param  {string} cspString\n   * @return {!TrustedTypeConfig}\n   */\n  static fromCSP(cspString) {\n    const isLoggingEnabled = true;\n    const policy = TrustedTypeConfig.parseCSP(cspString);\n    const enforce = DIRECTIVE_NAME in policy;\n    let allowHttpUrls = false;\n    let policies = ['*'];\n    if (enforce) {\n      allowHttpUrls = policy[DIRECTIVE_NAME]\n          .indexOf('\\'url-allow-http\\'') !== -1;\n      policies = policy[DIRECTIVE_NAME].filter((p) => p.charAt(0) !== '\\'');\n    }\n\n    return new TrustedTypeConfig(\n      isLoggingEnabled,\n      enforce, /* isEnforcementEnabled */\n      null, /* fallbackPolicyName */\n      policies, /* allowedPolicyNames */\n      allowHttpUrls,\n      cspString\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\nconst rejectInputFn = (s) => {\n  throw new TypeError('undefined conversion');\n};\n\n/**\n * @constructor\n * @property {!function(string):TrustedHTML} createHTML\n * @property {!function(string):TrustedURL} createURL\n * @property {!function(string):TrustedScriptURL} createScriptURL\n * @property {!function(string):TrustedScript} createScript\n * @property {!string} name\n */\nexport const TrustedTypePolicy = function() {\n  throw new TypeError('Illegal constructor');\n};\n\n/* eslint-disable no-unused-vars */\n/**\n * @typedef {TrustedTypesInnerPolicy}\n * @property {function(string):string} createHTML\n * @property {function(string):string} createURL\n * @property {function(string):string} createScriptURL\n * @property {function(string):string} createScript\n */\nlet TrustedTypesInnerPolicy = {};\n/* eslint-enable no-unused-vars */\n\n\nexport const trustedTypesBuilderTestOnly = function() {\n  // Capture common names early.\n  const {\n    create, defineProperty, freeze, getOwnPropertyNames,\n    getPrototypeOf, prototype: ObjectPrototype,\n  } = Object;\n\n  const {\n    forEach, push,\n  } = Array.prototype;\n\n  const creatorSymbol = Symbol();\n\n  /**\n   * Getter for the privateMap.\n   * @param  {Object} obj Key of the privateMap\n   * @return {Object<string, string>} Private storage.\n   */\n  const privates = function(obj) {\n    let v = privateMap.get(obj);\n    if (v === undefined) {\n      v = create(null); // initialize the private storage.\n      privateMap.set(obj, v);\n    }\n    return v;\n  };\n\n  /**\n   * Called before attacker-controlled code on an internal collections,\n   * copies prototype members onto the instance directly, so that later\n   * changes to prototypes cannot expose collection internals.\n   * @param {!T} collection\n   * @return {!T} collection\n   * @template T\n   */\n  function selfContained(collection) {\n    const proto = getPrototypeOf(collection);\n    if (proto == null || getPrototypeOf(proto) !== ObjectPrototype) {\n      throw new Error(); // Loop below is insufficient.\n    }\n    for (let key of getOwnPropertyNames(proto)) {\n      defineProperty(collection, key, {value: collection[key]});\n    }\n    return collection;\n  }\n\n  /**\n   * Map for private properties of Trusted Types object.\n   * This is so that the access to the type constructor does not give\n   * the ability to create typed values.\n   * @type {WeakMap}\n   */\n  const privateMap = selfContained(new WeakMap());\n\n  /**\n   * List of all configured policy names.\n   * @type {Array<string>}\n   */\n  const policyNames = selfContained([]);\n\n  /**\n   * Map of all exposed policies, keyed by policy name.\n   * @type {Map<string,!TrustedTypePolicy>}\n   */\n  const exposedPolicies = selfContained(new Map());\n\n  /**\n   * Allowed policy namess for policy names.\n   * @type {Array<string>}\n   */\n  const allowedNames = selfContained([]);\n\n  /**\n   * Whether to enforce allowedNames in createPolicy().\n   * @type {boolean}\n   */\n  let enforceNameWhitelist = false;\n\n\n  /**\n   * A value that is trusted to have certain security-relevant properties\n   * because the sources of such values are controlled.\n   */\n  class TrustedType {\n    /**\n     * Constructor for TrustedType. Only allowed to be called from within a\n     * policy.\n     * @param {symbol} s creatorSymbol\n     * @param {string} policyName The name of the policy this object was\n     *   created by.\n     */\n    constructor(s, policyName) {\n      // TODO: Figure out if symbol is needed, if the value is in privateMap.\n      if (s !== creatorSymbol) {\n        throw new Error('cannot call the constructor');\n      }\n      defineProperty(this, 'policyName',\n                     {value: '' + policyName, enumerable: true});\n    }\n\n    /**\n     * Returns the wrapped string value of the object.\n     * @return {string}\n     * @override\n     */\n    toString() {\n      return privates(this)['v'];\n    }\n\n    /**\n     * Returns the wrapped string value of the object.\n     * @return {string}\n     * @override\n     */\n    valueOf() {\n      return privates(this)['v'];\n    }\n  }\n\n  /**\n   * @param {function(new:TrustedType, symbol, string)} SubClass\n   * @param {string} canonName The class name which should be independent of\n   *     any renaming pass and which is relied upon by the enforcer and for\n   *     native type interop.\n   */\n  function lockdownTrustedType(SubClass, canonName) {\n    freeze(SubClass.prototype);\n    delete SubClass.name;\n    defineProperty(SubClass, 'name', {value: canonName});\n  }\n\n  /**\n   * Trusted URL object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedURL extends TrustedType {\n  }\n  lockdownTrustedType(TrustedURL, 'TrustedURL');\n\n  /**\n   * Trusted Script URL object wrapping a string that can only be created from a\n   * TT policy.\n   * TrustedScriptURL inherits from TrustedURL.\n   */\n  class TrustedScriptURL extends TrustedURL {\n  }\n  lockdownTrustedType(TrustedScriptURL, 'TrustedScriptURL');\n\n  /**\n   * Trusted HTML object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedHTML extends TrustedType {\n  }\n  lockdownTrustedType(TrustedHTML, 'TrustedHTML');\n\n  /**\n   * Trusted Script object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedScript extends TrustedType {\n  }\n  lockdownTrustedType(TrustedScript, 'TrustedScript');\n\n  lockdownTrustedType(TrustedType, 'TrustedType');\n\n  /**\n   * @type {!Object<string,!Function>}\n   */\n  const createTypeMapping = {\n    'createHTML': TrustedHTML,\n    'createScriptURL': TrustedScriptURL,\n    'createURL': TrustedURL,\n    'createScript': TrustedScript,\n  };\n\n  const createFunctionAllowed = createTypeMapping.hasOwnProperty;\n\n  /**\n   * Function generating a type checker.\n   * @template T\n   * @param  {T} type The type to check against.\n   * @return {function(*):boolean}\n   */\n  function isTrustedTypeChecker(type) {\n    return (obj) => (obj instanceof type) && privateMap.has(obj);\n  }\n\n  /**\n   * Wraps a user-defined policy rules with TT constructor\n   * @param  {string} policyName The policy name\n   * @param  {TrustedTypesInnerPolicy} innerPolicy InnerPolicy\n   * @return {!TrustedTypePolicy} Frozen policy object\n   */\n  function wrapPolicy(policyName, innerPolicy) {\n    /**\n     * @template T\n     * @param {function(new:T, symbol, string)} Ctor a trusted type constructor\n     * @param {string} methodName the policy factory method name\n     * @return {function(string):!T} a factory that produces instances of Ctor.\n     */\n    function creator(Ctor, methodName) {\n      // This causes thisValue to be null when called below.\n      const method = innerPolicy[methodName] || rejectInputFn;\n      const policySpecificType = freeze(new Ctor(creatorSymbol, policyName));\n      const factory = {\n        [methodName](s) { // Trick to get methodName to show in stacktrace.\n          let result = method(s);\n          if (result === undefined || result === null) {\n            result = '';\n          }\n          const allowedValue = '' + result;\n          const o = freeze(create(policySpecificType));\n          privates(o)['v'] = allowedValue;\n          return o;\n        },\n      }[methodName];\n      return freeze(factory);\n    }\n\n    let policy = create(TrustedTypePolicy.prototype);\n\n    for (const name of getOwnPropertyNames(createTypeMapping)) {\n      policy[name] = creator(createTypeMapping[name], name);\n    }\n    defineProperty(policy, 'name', {\n        value: policyName,\n        writable: false,\n        configurable: false,\n        enumerable: true,\n    });\n\n    return /** @type {!TrustedTypePolicy} */ (freeze(policy));\n  }\n\n  /**\n   * Returns a policy object, if given policy was exposed.\n   * @param  {string} name\n   * @return {?TrustedTypePolicy}\n   */\n  function getExposedPolicy(name) {\n    const pName = '' + name;\n    return exposedPolicies.get(pName) || null;\n  }\n\n  /**\n   * Returns all configured policy names (even for non-exposed policies).\n   * @return {!Array<string>}\n   */\n  function getPolicyNames() {\n    // TODO(msamuel): Should we sort policyNames to avoid leaking or\n    // encouraging dependency on the order in which policy names are\n    // registered?  I think JavaScript builtin sorts are efficient for\n    // almost-sorted lists so the amortized cost is close to O(n).\n    return policyNames.slice();\n  }\n\n  /**\n   * Creates a TT policy.\n   *\n   * Returns a frozen object representing a policy - a collection of functions\n   * that may create TT objects based on the user-provided rules specified\n   * in the policy object.\n   *\n   * @param  {string} name A unique name of the policy.\n   * @param  {TrustedTypesInnerPolicy} policy Policy rules object.\n   * @param  {boolean=} expose Iff true, the policy will be exposed (available\n   *   globally).\n   * @return {TrustedTypePolicy} The policy that may create TT objects\n   *   according to the policy rules.\n   * @todo Figure out if the return value (and the policy) can be typed.\n   */\n  function createPolicy(name, policy, expose = false) {\n    const pName = '' + name; // Assert it's a string\n\n    if (enforceNameWhitelist && allowedNames.indexOf(pName) === -1) {\n      throw new TypeError('Policy ' + pName + ' disallowed.');\n    }\n\n    if (policyNames.indexOf(pName) !== -1) {\n      throw new TypeError('Policy ' + pName + ' exists.');\n    }\n    // Register the name early so that if policy getters unwisely calls\n    // across protection domains to code that reenters this function,\n    // policy author still has rights to the name.\n    policyNames.push(pName);\n\n    // Only copy own properties of names present in createTypeMapping.\n    const innerPolicy = create(null);\n    if (policy && typeof policy === 'object') {\n      // Treat non-objects as empty policies.\n      for (const key of getOwnPropertyNames(policy)) {\n        if (createFunctionAllowed.call(createTypeMapping, key)) {\n          innerPolicy[key] = policy[key];\n        }\n      }\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn('TrustedTypes.createPolicy ' + pName +\n          ' was given an empty policy');\n    }\n    freeze(innerPolicy);\n\n    const wrappedPolicy = wrapPolicy(pName, innerPolicy);\n\n    if (expose) {\n      exposedPolicies.set(pName, wrappedPolicy);\n    }\n\n    return wrappedPolicy;\n  }\n\n  /**\n   * Applies the policy name whitelist.\n   * @param {!Array<string>} allowedPolicyNames\n   */\n  function setAllowedPolicyNames(allowedPolicyNames) {\n    if (allowedPolicyNames.indexOf('*') !== -1) { // Any policy name is allowed.\n      enforceNameWhitelist = false;\n    } else {\n      enforceNameWhitelist = true;\n      allowedNames.length = 0;\n      forEach.call(allowedPolicyNames, (el) => {\n        push.call(allowedNames, '' + el);\n      });\n    }\n  }\n\n  // TODO: Figure out if it's safe to return an instance of a typed object\n  // to make testing easier.\n  return freeze({\n\n    // Types definition, for convenience of instanceof checks\n    TrustedHTML,\n    TrustedURL,\n    TrustedScriptURL,\n    TrustedScript,\n\n    // The main function to create policies.\n    createPolicy,\n\n    // Policy getter\n    getExposedPolicy,\n\n    getPolicyNames,\n\n    // Below methods are not part of the public API and are only needed in the\n    // polyfill.\n\n    // Type checkers, also validating the object was initialized through a\n    // policy.\n    isHTML: isTrustedTypeChecker(TrustedHTML),\n    isURL: isTrustedTypeChecker(TrustedURL),\n    isScriptURL: isTrustedTypeChecker(TrustedScriptURL),\n    isScript: isTrustedTypeChecker(TrustedScript),\n\n    setAllowedPolicyNames,\n  });\n};\n\nexport const TrustedTypes = trustedTypesBuilderTestOnly();\nexport const TrustedHTML = TrustedTypes.TrustedHTML;\nexport const TrustedURL = TrustedTypes.TrustedURL;\nexport const TrustedScriptURL = TrustedTypes.TrustedScriptURL;\nexport const TrustedScript = TrustedTypes.TrustedScript;\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\nconst {\n  defineProperty,\n} = Object;\n\n/**\n * Installs the setter of a given property.\n * @param {!Object} object An object for which to wrap the property.\n * @param {string} name The name of the property to wrap.\n * @param {function(*): *|undefined} setter A setter function}\n */\nexport function installSetter(object, name, setter) {\n  const descriptor = {\n    set: setter,\n  };\n  defineProperty(object, name, descriptor);\n}\n\n/**\n * Installs a setter and getter of a given property.\n * @param {!Object} object An object for which to wrap the property.\n * @param {string} name The name of the property to wrap.\n * @param {function(*): *|undefined} setter A setter function}\n * @param {function(*): *|undefined} getter A getter function}\n */\nexport function installSetterAndGetter(object, name, setter, getter) {\n  const descriptor = {\n    set: setter,\n    get: getter,\n    configurable: true, // This can get uninstalled, we need configurable: true\n  };\n  defineProperty(object, name, descriptor);\n}\n\n/**\n * Installs the setter of a given property.\n * @param {!Object} object An object for which to wrap the property.\n * @param {string} name The name of the property to wrap.\n * @param {function(*): *|undefined} fn A function}\n */\nexport function installFunction(object, name, fn) {\n  defineProperty(object, name, {\n    value: fn,\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\n/* eslint-disable no-unused-vars */\nimport {DIRECTIVE_NAME, TrustedTypeConfig} from './data/trustedtypeconfig.js';\nimport {TrustedTypes} from './trustedtypes.js';\n\n/* eslint-enable no-unused-vars */\nimport {installFunction, installSetter, installSetterAndGetter}\n  from './utils/wrapper.js';\n\nconst {apply} = Reflect;\nconst {\n  getOwnPropertyNames,\n  getOwnPropertyDescriptor,\n  hasOwnProperty,\n  getPrototypeOf,\n  isPrototypeOf,\n} = Object;\n\nconst {slice} = String.prototype;\n\nconst UrlConstructor = URL.prototype.constructor;\n\n// This is not available in release Firefox :(\n// https://developer.mozilla.org/en-US/docs/Web/API/SecurityPolicyViolationEvent\n// https://bugzilla.mozilla.org/show_bug.cgi?id=1432523\nconst SecurityPolicyViolationEvent = window['SecurityPolicyViolationEvent'] ||\n  null;\n\n/**\n * Parses URL, catching all the errors.\n * @param  {string} url URL string to parse.\n * @return {URL|null}\n */\nfunction parseUrl_(url) {\n  try {\n    return new UrlConstructor(url, document.baseURI || undefined);\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * Checks if the URL is a HTTP(s) URL.\n * @param  {string}  url The URL to check.\n * @return {boolean} True iff the value is a http(s) URL.\n */\nfunction isHttpUrl_(url) {\n  const parsedUrl = parseUrl_(url);\n  if (!parsedUrl) {\n    return false;\n  }\n  return parsedUrl.protocol == 'http:' || parsedUrl.protocol == 'https:';\n}\n\n/**\n * A map of attribute names to allowed types.\n * @type {!Object<string, !Object<string, !Function>>}\n */\nlet SET_ATTRIBUTE_TYPE_MAP = {\n  // TODO(slekies): Add SVG Elements here\n  // TODO(koto): Figure out what to to with <link>\n  'HTMLAnchorElement': {\n    'href': TrustedTypes.TrustedURL,\n  },\n  'HTMLAreaElement': {\n    'href': TrustedTypes.TrustedURL,\n  },\n  'HTMLBaseElement': {\n    'href': TrustedTypes.TrustedURL,\n  },\n  'HTMLButtonElement': {\n    'formaction': TrustedTypes.TrustedURL,\n  },\n  'HTMLSourceElement': {\n    'src': TrustedTypes.TrustedURL,\n  },\n  'HTMLImageElement': {\n    'src': TrustedTypes.TrustedURL,\n    // TODO(slekies): add special handling for srcset\n  },\n  'HTMLTrackElement': {\n    'src': TrustedTypes.TrustedURL,\n  },\n  'HTMLMediaElement': {\n    'src': TrustedTypes.TrustedURL,\n  },\n  'HTMLInputElement': {\n    'src': TrustedTypes.TrustedURL,\n    'formaction': TrustedTypes.TrustedURL,\n  },\n  'HTMLFrameElement': {\n    'src': TrustedTypes.TrustedURL,\n  },\n  'HTMLIFrameElement': {\n    'src': TrustedTypes.TrustedURL,\n    'srcdoc': TrustedTypes.TrustedHTML,\n  },\n  'HTMLLinkElement': {\n    'href': TrustedTypes.TrustedScriptURL,\n  },\n  'HTMLObjectElement': {\n    'data': TrustedTypes.TrustedScriptURL,\n    'codebase': TrustedTypes.TrustedScriptURL,\n  },\n  'HTMLEmbedElement': {\n    'src': TrustedTypes.TrustedScriptURL,\n  },\n  'HTMLScriptElement': {\n    'src': TrustedTypes.TrustedScriptURL,\n    'text': TrustedTypes.TrustedScript,\n  },\n  'HTMLElement': {\n  },\n};\n\n// Add inline event handlers property names.\nfor (let name of getOwnPropertyNames(HTMLElement.prototype)) {\n  if (name.slice(0, 2) === 'on') {\n    SET_ATTRIBUTE_TYPE_MAP['HTMLElement'][name] = TrustedTypes.TrustedScript;\n  }\n}\n\n/**\n * Map of type names to type checking function.\n * @type {!Object<string,!Function>}\n */\nconst TYPE_CHECKER_MAP = {\n  'TrustedHTML': TrustedTypes.isHTML,\n  'TrustedURL': TrustedTypes.isURL,\n  'TrustedScriptURL': TrustedTypes.isScriptURL,\n  'TrustedScript': TrustedTypes.isScript,\n};\n\n/**\n * Map of type names to type producing function.\n * @type {Object<string,string>}\n */\nconst TYPE_PRODUCER_MAP = {\n  'TrustedHTML': 'createHTML',\n  'TrustedURL': 'createURL',\n  'TrustedScriptURL': 'createScriptURL',\n  'TrustedScript': 'createScript',\n};\n\n/**\n * @type {function(string):?TrustedTypePolicy}\n */\nconst getExposedPolicy = TrustedTypes.getExposedPolicy;\n\n/* eslint-disable no-unused-vars */\n/**\n * @typedef {TrustedTypePolicy}\n * @property {function(string):TrustedHTML} createHTML\n * @property {function(string):TrustedURL} createURL\n * @property {function(string):TrustedScriptURL} createScriptURL\n * @property {function(string):TrustedScript} createScript\n */\nlet TrustedTypePolicy = {};\n/* eslint-enable no-unused-vars */\n\n/**\n * A map of HTML attribute to element property names.\n * @type {!Object<string, string>}\n */\nconst ATTR_PROPERTY_MAP = {\n  'codebase': 'codeBase',\n  'formaction': 'formAction',\n};\n\n/**\n * An object for enabling trusted type enforcement.\n */\nexport class TrustedTypesEnforcer {\n  /**\n   * @param {!TrustedTypeConfig} config The configuration for\n   * trusted type enforcement.\n   */\n  constructor(config) {\n    /**\n     * A configuration for the trusted type enforcement.\n     * @private {!TrustedTypeConfig}\n     */\n    this.config_ = config;\n    /**\n     * @private {Object<string, function(*): *|undefined>}\n     */\n    this.originalSetters_ = {};\n  }\n\n  /**\n   * Wraps HTML sinks with an enforcement setter, which will enforce\n   * trusted types and do logging, if enabled.\n   *\n   */\n  install() {\n    TrustedTypes.setAllowedPolicyNames(this.config_.allowedPolicyNames);\n\n    if (!this.config_.isEnforcementEnabled && !this.config_.isLoggingEnabled) {\n      return;\n    }\n\n    this.wrapSetter_(Element.prototype, 'innerHTML', TrustedTypes.TrustedHTML);\n    this.wrapSetter_(Element.prototype, 'outerHTML', TrustedTypes.TrustedHTML);\n    this.wrapWithEnforceFunction_(Range.prototype, 'createContextualFragment',\n        TrustedTypes.TrustedHTML, 0);\n    this.wrapWithEnforceFunction_(Element.prototype, 'insertAdjacentHTML',\n        TrustedTypes.TrustedHTML, 1);\n\n    if (getOwnPropertyDescriptor(Document.prototype, 'write')) {\n      // Chrome\n      this.wrapWithEnforceFunction_(Document.prototype, 'write',\n          TrustedTypes.TrustedHTML, 0);\n      this.wrapWithEnforceFunction_(Document.prototype, 'open',\n          TrustedTypes.TrustedURL, 0);\n    } else {\n      // Firefox\n      this.wrapWithEnforceFunction_(HTMLDocument.prototype, 'write',\n        TrustedTypes.TrustedHTML, 0);\n      this.wrapWithEnforceFunction_(HTMLDocument.prototype, 'open',\n          TrustedTypes.TrustedURL, 0);\n    }\n\n    this.wrapWithEnforceFunction_(window, 'open', TrustedTypes.TrustedURL, 0);\n    if (DOMParser) {\n      this.wrapWithEnforceFunction_(DOMParser.prototype, 'parseFromString',\n          TrustedTypes.TrustedHTML, 0);\n    }\n    this.wrapWithEnforceFunction_(window, 'setInterval',\n        TrustedTypes.TrustedScript, 0);\n    this.wrapWithEnforceFunction_(window, 'setTimeout',\n        TrustedTypes.TrustedScript, 0);\n    this.wrapSetAttribute_();\n    this.installScriptWrappers_();\n    this.installPropertySetWrappers_();\n  }\n\n  /**\n   * Removes the original setters.\n   */\n  uninstall() {\n    TrustedTypes.setAllowedPolicyNames(['*']);\n\n    if (!this.config_.isEnforcementEnabled && !this.config_.isLoggingEnabled) {\n      return;\n    }\n\n    this.restoreSetter_(Element.prototype, 'innerHTML');\n    this.restoreSetter_(Element.prototype, 'outerHTML');\n    this.restoreFunction_(Range.prototype, 'createContextualFragment');\n    this.restoreFunction_(Element.prototype, 'insertAdjacentHTML');\n    this.restoreFunction_(Element.prototype, 'setAttribute');\n    this.restoreFunction_(Element.prototype, 'setAttributeNS');\n\n    if (getOwnPropertyDescriptor(Document.prototype, 'write')) {\n      this.restoreFunction_(Document.prototype, 'write');\n      this.restoreFunction_(Document.prototype, 'open');\n    } else {\n      this.restoreFunction_(HTMLDocument.prototype, 'write');\n      this.restoreFunction_(HTMLDocument.prototype, 'open');\n    }\n    this.restoreFunction_(window, 'open');\n    if (DOMParser) {\n      this.restoreFunction_(DOMParser.prototype, 'parseFromString');\n    }\n    this.restoreFunction_(window, 'setTimeout');\n    this.restoreFunction_(window, 'setInterval');\n    this.uninstallPropertySetWrappers_();\n    this.uninstallScriptWrappers_();\n  }\n\n  /**\n   * Installs wrappers for setting properties of script elements.\n   */\n  installScriptWrappers_() {\n    // HTMLScript element has no own setters for crucial properties, we have to\n    // reuse ones from HTMLElement.\n    this.wrapSetter_(HTMLScriptElement.prototype, 'innerText',\n        TrustedTypes.TrustedScript, HTMLElement.prototype);\n    this.wrapSetter_(HTMLScriptElement.prototype, 'textContent',\n        TrustedTypes.TrustedScript, Node.prototype);\n  }\n\n  /**\n   * Uninstalls wrappers for setting properties of script elements.\n   */\n  uninstallScriptWrappers_() {\n    this.restoreSetter_(HTMLScriptElement.prototype, 'innerText',\n        HTMLElement.prototype);\n    this.restoreSetter_(HTMLScriptElement.prototype, 'textContent',\n        Node.prototype);\n  }\n\n  /**\n   * Installs wrappers for directly setting properties\n   * based on SET_ATTRIBUTE_TYPE_MAP.\n   * @private\n   */\n  installPropertySetWrappers_() {\n    /* eslint-disable guard-for-in */\n    for (let type of getOwnPropertyNames(SET_ATTRIBUTE_TYPE_MAP)) {\n      for (let attribute of getOwnPropertyNames(SET_ATTRIBUTE_TYPE_MAP[type])) {\n        const property = apply(hasOwnProperty, ATTR_PROPERTY_MAP, [attribute]) ?\n              ATTR_PROPERTY_MAP[attribute] : attribute;\n        this.wrapSetter_(window[type].prototype, property,\n                         SET_ATTRIBUTE_TYPE_MAP[type][attribute]);\n      }\n    }\n  }\n\n  /**\n   * Uninstalls wrappers for directly setting properties\n   * based on SET_ATTRIBUTE_TYPE_MAP.\n   * @private\n   */\n  uninstallPropertySetWrappers_() {\n    /* eslint-disable guard-for-in */\n    for (let type of getOwnPropertyNames(SET_ATTRIBUTE_TYPE_MAP)) {\n      for (let attribute of getOwnPropertyNames(SET_ATTRIBUTE_TYPE_MAP[type])) {\n        const property = attribute in ATTR_PROPERTY_MAP ?\n              ATTR_PROPERTY_MAP[attribute] : attribute;\n        this.restoreSetter_(window[type].prototype, property);\n      }\n    }\n  }\n\n  /** Wraps set attribute with an enforcement function. */\n  wrapSetAttribute_() {\n    let that = this;\n    this.wrapFunction_(\n        Element.prototype,\n        'setAttribute',\n        /**\n         * @this {TrustedTypesEnforcer}\n         * @param {function(!Function, ...*)} originalFn\n         * @return {*}\n         */\n        function(originalFn, ...args) {\n          return that.setAttributeWrapper_\n              .bind(that, this, originalFn)\n              .apply(that, args);\n        });\n    this.wrapFunction_(\n      Element.prototype,\n      'setAttributeNS',\n      /**\n         * @this {TrustedTypesEnforcer}\n         * @param {function(!Function, ...*)} originalFn\n         * @return {*}\n         */\n        function(originalFn, ...args) {\n          return that.setAttributeNSWrapper_\n              .bind(that, this, originalFn)\n              .apply(that, args);\n        });\n  }\n\n  /**\n   * Returns the required type for the setAtrtibute call.\n   * @param  {!Object} context The object to infer the type of attribute of.\n   * @param  {string} attrName The attribute name.\n   * @return {Function} The type to enforce, or null if no contract is found.\n   */\n  getRequiredTypeForAttribute_(context, attrName) {\n      let ctor = context.constructor;\n      do {\n        let type = ctor && ctor.name &&\n            SET_ATTRIBUTE_TYPE_MAP[ctor.name] &&\n            SET_ATTRIBUTE_TYPE_MAP[ctor.name][attrName];\n\n        if (type || ctor == HTMLElement) {\n          // Stop at HTMLElement.\n          return type;\n        }\n        // Explore the prototype chain.\n      } while (ctor = getPrototypeOf(ctor));\n\n      return null;\n  }\n\n  /**\n   * Enforces type checking for Element.prototype.setAttribute.\n   * @param {!Object} context The context for the call to the original function.\n   * @param {!Function} originalFn The original setAttribute function.\n   * @return {*}\n   */\n  setAttributeWrapper_(context, originalFn, ...args) {\n    // Note(slekies): In a normal application constructor should never be null.\n    // However, there are no guarantees. If the constructor is null, we cannot\n    // determine whether a special type is required. In order to not break the\n    // application, we will not do any further type checks and pass the call\n    // to setAttribute.\n    if (context.constructor !== null) {\n      let attrName = (args[0] = String(args[0])).toLowerCase();\n      let type = this.getRequiredTypeForAttribute_(context, attrName);\n\n      if (type instanceof Function) {\n        return this.enforce_(\n          context, 'setAttribute', type, originalFn, 1, args);\n      }\n    }\n\n    return originalFn.apply(context, args);\n  }\n\n  /**\n   * Enforces type checking for Element.prototype.setAttributeNS.\n   * @param {!Object} context The context for the call to the original function.\n   * @param {!Function} originalFn The original setAttributeNS function.\n   * @return {*}\n   */\n  setAttributeNSWrapper_(context, originalFn, ...args) {\n    /**\n     * @param {string} ns the namespace URL.\n     * @return {boolean} true iff the given argument is an HTML namespace.\n     */\n    function isHtmlNamespace(ns) {\n      return true; // TODO(msamuel): implement me\n    }\n    // See the note from setAttributeWrapper_ above.\n    if (context.constructor !== null) {\n      let ns = (args[0] = String(args[0])).toLowerCase();\n      let attrName = (args[1] = String(args[1])).toLowerCase();\n      if (isHtmlNamespace(ns)) {\n        let type = context.constructor && context.constructor.name &&\n            SET_ATTRIBUTE_TYPE_MAP[context.constructor.name] &&\n            SET_ATTRIBUTE_TYPE_MAP[context.constructor.name][attrName];\n\n        if (type instanceof Function) {\n          return this.enforce_(\n            context, 'setAttributeNS', type, originalFn, 2, args);\n        }\n      }\n      // TODO(msamuel): handle SVG namespace.  See TODO(slekies) above.\n    }\n\n    return originalFn.apply(context, args);\n  }\n\n\n  /**\n   * Wraps a setter with the enforcement wrapper.\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @param {!Function} type The type to enforce.\n   * @param {number} argNumber Number of the argument to enforce the type of.\n   * @private\n   */\n  wrapWithEnforceFunction_(object, name, type, argNumber) {\n    let that = this;\n    this.wrapFunction_(\n        object,\n        name,\n        /**\n         * @this {TrustedTypesEnforcer}\n         * @param {function(!Function, ...*)} originalFn\n         * @return {*}\n         */\n        function(originalFn, ...args) {\n          return that.enforce_.call(that, this, name, type, originalFn,\n                                    argNumber, args);\n        });\n  }\n\n\n  /**\n   * Wraps an existing function with a given function body and stores the\n   * original function.\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @param {function(!Function, ...*)} functionBody The wrapper function.\n   */\n  wrapFunction_(object, name, functionBody) {\n    let descriptor = getOwnPropertyDescriptor(object, name);\n    let originalFn = /** @type function(*):* */ (\n        descriptor ? descriptor.value : null);\n\n    if (!(originalFn instanceof Function)) {\n      throw new TypeError(\n          'Property ' + name + ' on object' + object + ' is not a function');\n    }\n\n    let key = this.getKey_(object, name);\n    if (this.originalSetters_[key]) {\n      throw new Error('TrustedTypesEnforcer: Double installation detected');\n    }\n    installFunction(\n        object,\n        name,\n        /**\n         * @this {TrustedTypesEnforcer}\n         * @return {*}\n         */\n        function(...args) {\n          return functionBody.bind(this, originalFn).apply(this, args);\n        });\n    this.originalSetters_[key] = originalFn;\n  }\n\n  /**\n   * Wraps a setter with the enforcement wrapper.\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @param {!Function} type The type to enforce.\n   * @param {!Object=} descriptorObject If present, will reuse the\n   *   setter/getter from this one, instead of object. Used for redefining\n   *   setters in subclasses.\n   * @private\n   */\n  wrapSetter_(object, name, type, descriptorObject = undefined) {\n    if (descriptorObject && !isPrototypeOf.call(descriptorObject, object)) {\n      throw new Error('Invalid prototype chain');\n    }\n\n    let useObject = descriptorObject || object;\n\n    let descriptor = getOwnPropertyDescriptor(useObject, name);\n\n    let originalSetter = /** @type {function(*):*} */ (descriptor ?\n        descriptor.set : null);\n\n    if (!(originalSetter instanceof Function)) {\n      throw new TypeError(\n          'No setter for property ' + name + ' on object' + object);\n    }\n\n    let key = this.getKey_(object, name);\n    if (this.originalSetters_[key]) {\n      throw new Error('TrustedTypesEnforcer: Double installation detected');\n    }\n    let that = this;\n    /**\n     * @this {TrustedTypesEnforcer}\n     * @param {*} value\n     */\n    let enforcingSetter = function(value) {\n          that.enforce_.call(that, this, name, type, originalSetter, 0,\n                             [value]);\n        };\n\n    if (useObject === object) {\n      installSetter(\n          object,\n          name,\n          enforcingSetter);\n    } else {\n      // Since we're creating a new setter in subclass, we also need to\n      // overwrite the getter.\n      installSetterAndGetter(\n          object,\n          name,\n          enforcingSetter,\n          descriptor.get\n      );\n    }\n    this.originalSetters_[key] = originalSetter;\n  }\n\n  /**\n   * Restores the original setter for the property, as encountered during\n   * install().\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @param {!Object=} descriptorObject If present, will restore the original\n   *   setter/getter from this one, instead of object.\n   * @private\n   */\n  restoreSetter_(object, name, descriptorObject = undefined) {\n    let key = this.getKey_(object, name);\n    if (descriptorObject && !isPrototypeOf.call(descriptorObject, object)) {\n      throw new Error('Invalid prototype chain');\n    }\n    if (!this.originalSetters_[key]) {\n      throw new Error(\n          'TrustedTypesEnforcer: Cannot restore (double uninstallation?)');\n    }\n    if (descriptorObject) {\n      // We have to also overwrite a getter.\n      installSetterAndGetter(object, name, this.originalSetters_[key],\n          getOwnPropertyDescriptor(descriptorObject, name).get);\n    } else {\n      installSetter(object, name, this.originalSetters_[key]);\n    }\n    delete this.originalSetters_[key];\n  }\n\n  /**\n   * Restores the original method of an object, as encountered during install().\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @private\n   */\n  restoreFunction_(object, name) {\n    let key = this.getKey_(object, name);\n    if (!this.originalSetters_[key]) {\n      throw new Error(\n          'TrustedTypesEnforcer: Cannot restore (double uninstallation?)');\n    }\n    installFunction(object, name, this.originalSetters_[key]);\n    delete this.originalSetters_[key];\n  }\n\n  /**\n   * Returns the key name for caching original setters.\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @return {string} Key name.\n   * @private\n   */\n  getKey_(object, name) {\n    // TODO(msamuel): Can we use Object.prototype.toString.call(object)\n    // to get an unspoofable string here?\n    // TODO(msamuel): fail on '-' in object.constructor.name?\n    return '' + object.constructor.name + '-' + name;\n  }\n\n  /**\n   * Logs and enforces TrustedTypes depending on the given configuration.\n   * @template T\n   * @param {!Object} context The object that the setter is called for.\n   * @param {string} propertyName The name of the property.\n   * @param {!Function} typeToEnforce The type to enforce.\n   * @param {function(?):T} originalSetter Original setter.\n   * @param {number} argNumber Number of argument to enforce the type of.\n   * @param {Array} args Arguments.\n   * @return {T}\n   * @private\n   */\n  enforce_(context, propertyName, typeToEnforce, originalSetter, argNumber,\n           args) {\n    let value = args[argNumber];\n    const typeName = '' + typeToEnforce.name;\n    // If typed value is given, pass through.\n    if (TYPE_CHECKER_MAP.hasOwnProperty(typeName) &&\n        TYPE_CHECKER_MAP[typeName](value)) {\n      return apply(originalSetter, context, args);\n    }\n\n    if (typeToEnforce === TrustedTypes.TrustedScript) {\n      // If a function (instead of string) is passed to inline event attribute,\n      // or set(Timeout|Interval), pass through.\n      const propertyAcceptsFunctions =\n          propertyName == 'setInterval' ||\n          propertyName == 'setTimeout' ||\n          apply(slice, propertyName, [0, 2]) === 'on';\n      if (propertyAcceptsFunctions &&\n          (value === null || typeof value === 'function')) {\n        return apply(originalSetter, context, args);\n      }\n    }\n\n\n    // Apply url-allow-http\n    if (typeToEnforce === TrustedTypes.TrustedURL &&\n        this.config_.allowHttpUrls) {\n      const url = '' + value;\n      if (isHttpUrl_(url)) {\n        args[argNumber] = url;\n        return apply(originalSetter, context, args);\n      }\n    }\n\n    // Apply a fallback policy, if it exists.\n    const fallback = this.config_.fallbackPolicyName;\n    if (fallback) {\n      const fallbackPolicy = getExposedPolicy.call(TrustedTypes, fallback);\n      if (fallbackPolicy && TYPE_CHECKER_MAP.hasOwnProperty(typeName)) {\n        let fallbackValue;\n        try {\n          fallbackValue = fallbackPolicy[TYPE_PRODUCER_MAP[typeName]](value);\n        } catch (e) {\n          // eslint-disable-next-line no-empty\n        }\n        args[argNumber] = fallbackValue;\n        return apply(originalSetter, context, args);\n      }\n    }\n\n    let contextName = context.constructor.name || '' + context;\n    let message = `Failed to set ${propertyName} on ${contextName}: `\n        + `This property requires ${typeName}.`;\n\n    if (this.config_.isLoggingEnabled) {\n      // eslint-disable-next-line no-console\n      console.warn(message, propertyName, context, typeToEnforce, value);\n    }\n\n    // Unconditionally dispatch an event.\n    if (typeof SecurityPolicyViolationEvent == 'function') {\n      let blockedURI = '';\n      if (typeToEnforce === TrustedTypes.TrustedURL ||\n          typeToEnforce === TrustedTypes.TrustedScriptURL) {\n        blockedURI = parseUrl_(value) || '';\n        if (blockedURI) {\n          blockedURI = blockedURI.href;\n        }\n      }\n      const valueSlice = apply(slice, '' + value, [0, 40]);\n      const event = new SecurityPolicyViolationEvent(\n        'securitypolicyviolation',\n        {\n          'bubbles': true,\n          'blockedURI': blockedURI,\n          'disposition': this.config_.isEnforcementEnabled ?\n              'enforce' : 'report',\n          'documentURI': document.location.href,\n          'effectiveDirective': DIRECTIVE_NAME,\n          'originalPolicy': this.config_.cspString,\n          'statusCode': 0,\n          'violatedDirective': DIRECTIVE_NAME,\n          'sample': `${contextName}.${propertyName} ${valueSlice}`,\n        });\n      if (context.isConnected) {\n        context.dispatchEvent(event);\n      } else { // Fallback - dispatch an event on base document.\n        document.dispatchEvent(event);\n      }\n    }\n\n    if (this.config_.isEnforcementEnabled) {\n      throw new TypeError(message);\n    } else { // pass-through\n      return apply(originalSetter, context, args);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\n/**\n * @fileoverview Entry point for a polyfill that only defines the types\n * (i.e. no enforcement logic).\n */\nimport {TrustedTypes, TrustedHTML, TrustedURL, TrustedScriptURL, TrustedScript,\n    TrustedTypePolicy} from '../trustedtypes.js';\n\nconst tt = TrustedTypes;\n\n// Make sure Closure compiler exposes the names.\nif (typeof window !== 'undefined' &&\n    typeof window['TrustedTypes'] === 'undefined') {\n  window['TrustedTypes'] = {\n    'isHTML': tt.isHTML,\n    'isURL': tt.isURL,\n    'isScriptURL': tt.isScriptURL,\n    'isScript': tt.isScript,\n    'createPolicy': tt.createPolicy,\n    'getExposedPolicy': tt.getExposedPolicy,\n    'getPolicyNames': tt.getPolicyNames,\n  };\n\n  window['TrustedHTML'] = TrustedHTML;\n  window['TrustedURL'] = TrustedURL;\n  window['TrustedScriptURL'] = TrustedScriptURL;\n  window['TrustedScript'] = TrustedScript;\n  window['TrustedTypePolicy'] = TrustedTypePolicy;\n}\n\nexport default tt;\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\n/**\n * @fileoverview Entry point for a polyfill that enforces the types.\n */\nimport {TrustedTypesEnforcer} from '../enforcer.js';\nimport {TrustedTypeConfig} from '../data/trustedtypeconfig.js';\n/* eslint-disable no-unused-vars */\nimport TrustedTypes from './api_only.js';\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Tries to guess a CSP policy from:\n *  - the current polyfill script element text content (if prefixed with\n *    \"Content-Security-Policy:\")\n *  - the data-csp attribute value of the current script element.\n *  - meta header\n * @return {?string} Guessed CSP value, or null.\n */\nfunction detectPolicy() {\n    try {\n        const currentScript = document.currentScript || (function() {\n          let scripts = document.getElementsByTagName('script');\n          return scripts[scripts.length - 1];\n        })();\n\n        const bodyPrefix = 'Content-Security-Policy:';\n        if (currentScript &&\n            currentScript.textContent.trim().substr(0, bodyPrefix.length) ==\n                bodyPrefix) {\n            return currentScript.textContent.trim().slice(bodyPrefix.length);\n        }\n        if (currentScript.dataset['csp']) {\n            return currentScript.dataset['csp'];\n        }\n        const cspInMeta = document.head.querySelector(\n            'meta[http-equiv^=\"Content-Security-Policy\"]');\n        if (cspInMeta) {\n            return cspInMeta['content'].trim();\n        }\n    } catch (e) {\n        return null;\n    }\n    return null;\n}\n\n/**\n * Bootstraps all trusted types polyfill and their enforcement.\n */\nexport function bootstrap() {\n  const csp = detectPolicy();\n  const config = csp ? TrustedTypeConfig.fromCSP(csp) : new TrustedTypeConfig(\n    /* isLoggingEnabled */ false,\n    /* isEnforcementEnabled */ false,\n    /* fallbackPolicyName */ null,\n    /* allowedPolicyNames */ ['*']);\n\n  const trustedTypesEnforcer = new TrustedTypesEnforcer(config);\n\n  trustedTypesEnforcer.install();\n}\n\n// Bootstrap only if native implementation is missing.\nif (!(window['TrustedTypePolicyFactory'] instanceof Function)) {\n    bootstrap();\n}\n"],
"names":["TrustedTypeConfig","isLoggingEnabled","isEnforcementEnabled","fallbackPolicyName","allowedPolicyNames","allowHttpUrls","cspString","WHITESPACE","trim","split","SEMICOLON","map","serializedDirective","reduce","parsed","directive","slice","s","sort","policy","parseCSP","enforce","DIRECTIVE_NAME","policies","indexOf","filter","p","charAt","rejectInputFn","TypeError","TrustedTypePolicy","TrustedTypes","trustedTypesBuilderTestOnly","privates","obj","v","privateMap","get","undefined","create","set","selfContained","collection","proto","getPrototypeOf","ObjectPrototype","Error","key","getOwnPropertyNames","defineProperty","value","lockdownTrustedType","SubClass","canonName","freeze","prototype","name","isTrustedTypeChecker","type","has","wrapPolicy","policyName","innerPolicy","creator","Ctor","methodName","method","policySpecificType","creatorSymbol","result","allowedValue","o","factory","createTypeMapping","writable","configurable","enumerable","Object","forEach","push","Array","Symbol","WeakMap","policyNames","exposedPolicies","Map","allowedNames","enforceNameWhitelist","TrustedType","TrustedURL","TrustedScriptURL","TrustedHTML","TrustedScript","createFunctionAllowed","hasOwnProperty","createPolicy","expose","pName","call","console","warn","wrappedPolicy","getExposedPolicy","getPolicyNames","isHTML","isURL","isScriptURL","isScript","setAllowedPolicyNames","length","el","installFunction","object","fn","apply","Reflect","getOwnPropertyDescriptor","isPrototypeOf","String","UrlConstructor","URL","constructor","SecurityPolicyViolationEvent","window","parseUrl_","url","document","baseURI","e","SET_ATTRIBUTE_TYPE_MAP","HTMLElement","TYPE_CHECKER_MAP","TYPE_PRODUCER_MAP","ATTR_PROPERTY_MAP","TrustedTypesEnforcer","config","config_","originalSetters_","wrapSetter_","Element","wrapWithEnforceFunction_","Range","Document","HTMLDocument","DOMParser","wrapSetAttribute_","installScriptWrappers_","installPropertySetWrappers_","HTMLScriptElement","Node","attribute","property","that","wrapFunction_","originalFn","args","setAttributeWrapper_","bind","setAttributeNSWrapper_","context","attrName","ctor","toLowerCase","getRequiredTypeForAttribute_","Function","enforce_","argNumber","functionBody","descriptor","getKey_","descriptorObject","enforcingSetter","originalSetter","useObject","propertyName","typeToEnforce","typeName","parsedUrl","protocol","fallback","fallbackPolicy","fallbackValue","contextName","message","blockedURI","href","valueSlice","event","location","isConnected","dispatchEvent","detectPolicy","currentScript","scripts","getElementsByTagName","bodyPrefix","textContent","substr","dataset","cspInMeta","head","querySelector","csp","fromCSP","install","trustedTypesEnforcer"]
}
