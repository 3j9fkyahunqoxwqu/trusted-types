{
"version":3,
"file":"trustedtypes.build.js",
"lineCount":10,
"mappings":"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",
"sources":["src/data/trustedtypeconfig.js","src/trustedtypes.js","src/utils/wrapper.js","src/enforcer.js","src/polyfill/api_only.js","src/polyfill/full.js"],
"sourcesContent":["/*\nCopyright 2017 Google Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * A configuration object for trusted type enforcement.\n */\nexport class TrustedTypeConfig {\n  /**\n   * @param {boolean} isLoggingEnabled If true enforcement wrappers will log\n   *   warnings to the console.\n   * @param {boolean} isEnforcementEnabled If true enforcement is enabled at\n   *   runtime.\n   * @param {?string} fallbackPolicyName If present, direct DOM sink usage\n   *   will be passed throught this policy (has to be exposed).\n   * @param {Array<string>} allowedPolicyNames Whitelisted policy names.\n   */\n  constructor(isLoggingEnabled,\n      isEnforcementEnabled,\n      fallbackPolicyName,\n      allowedPolicyNames) {\n    /**\n      * True if logging is enabled.\n      * @type {boolean}\n      */\n    this.isLoggingEnabled = isLoggingEnabled;\n\n    /**\n      * True if enforcement is enabled.\n      * @type {boolean}\n      */\n    this.isEnforcementEnabled = isEnforcementEnabled;\n\n    /**\n     * Fallback policy name\n     * @type {?string}\n     */\n    this.fallbackPolicyName = fallbackPolicyName;\n\n    /**\n     * Allowed policy names.\n     * @type {Array<string>}\n     */\n    this.allowedPolicyNames = allowedPolicyNames;\n  }\n\n  /**\n   * Parses a CSP policy.\n   * @link https://www.w3.org/TR/CSP3/#parse-serialized-policy\n   * @param  {string} cspString String with a CSP definition.\n   * @return {Object<string,Array<string>>} Parsed CSP, keyed by directive\n   *   names.\n   */\n  static parseCSP(cspString) {\n    const SEMICOLON = /\\s*;\\s*/;\n    const WHITESPACE = /\\s+/;\n    return cspString.trim().split(SEMICOLON)\n        .map((serializedDirective) => serializedDirective.split(WHITESPACE))\n        .reduce(function(parsed, directive) {\n          if (directive[0]) {\n            parsed[directive[0]] = directive.slice(1).map((s) => s).sort();\n          }\n          return parsed;\n        }, {});\n  }\n\n  /**\n   * Creates a TrustedTypeConfig object from a CSP string.\n   * @param  {string} cspString\n   * @return {!TrustedTypeConfig}\n   */\n  static fromCSP(cspString) {\n    const isLoggingEnabled = true;\n    const policy = TrustedTypeConfig.parseCSP(cspString);\n    const enforce = 'trusted-types' in policy;\n    return new TrustedTypeConfig(\n      isLoggingEnabled,\n      enforce, /* isEnforcementEnabled */\n      null, /* fallbackPolicyName */\n      enforce ? policy['trusted-types'] : ['*'] /* allowedPolicyNames */\n    );\n  }\n}\n","/*\nCopyright 2018 Google Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/* eslint-disable no-unused-vars */\n/**\n * @typedef Policy\n * @property {function(string):TrustedHTML} createHTML\n * @property {function(string):TrustedURL} createURL\n * @property {function(string):TrustedScriptURL} createScriptURL\n */\nlet Policy = {};\n\n/**\n * @typedef InnerPolicy\n * @property {function(string):string} createHTML\n * @property {function(string):string} createURL\n * @property {function(string):string} createScriptURL\n * @property {boolean} expose\n */\nlet InnerPolicy = {};\n/* eslint-enable no-unused-vars */\n\n\nconst {apply} = Reflect;\nconst {hasOwnProperty} = Object.prototype;\n\nexport const trustedTypesBuilderTestOnly = function() {\n  // Capture common names early.\n  const {\n    assign, create, defineProperty, freeze, getOwnPropertyNames,\n    getPrototypeOf, prototype: ObjectPrototype,\n  } = Object;\n\n  const {\n    forEach, push,\n  } = Array.prototype;\n\n  const creatorSymbol = Symbol();\n\n  /**\n   * Getter for the privateMap.\n   * @param  {Object} obj Key of the privateMap\n   * @return {Object} Private storage.\n   */\n  const privates = function(obj) {\n    let v = privateMap.get(obj);\n    if (v === undefined) {\n      v = create(null); // initialize the private storage.\n      privateMap.set(obj, v);\n    }\n    return v;\n  };\n\n  /**\n   * Called before attacker-controlled code on an internal collections,\n   * copies prototype members onto the instance directly, so that later\n   * changes to prototypes cannot expose collection internals.\n   * @param {!T} collection\n   * @return {!T} collection\n   * @template T\n   */\n  function selfContained(collection) {\n    const proto = getPrototypeOf(collection);\n    if (proto == null || getPrototypeOf(proto) !== ObjectPrototype) {\n      throw new Error(); // Loop below is insufficient.\n    }\n    for (let key of getOwnPropertyNames(proto)) {\n      defineProperty(collection, key, {value: collection[key]});\n    }\n    return collection;\n  }\n\n  /**\n   * Map for private properties of Trusted Types object.\n   * This is so that the access to the type constructor does not give\n   * the ability to create typed values.\n   * @type {WeakMap}\n   */\n  const privateMap = selfContained(new WeakMap());\n\n  /**\n   * List of all configured policy names.\n   * @type {Array<string>}\n   */\n  const policyNames = selfContained([]);\n\n  /**\n   * Map of all exposed policies, keyed by policy name.\n   * @type {Map<string,Object>}\n   */\n  const exposedPolicies = selfContained(new Map());\n\n  /**\n   * Allowed policy namess for policy names.\n   * @type {Array<string>}\n   */\n  const allowedNames = selfContained([]);\n\n  /**\n   * Whether to enforce allowedNames in createPolicy().\n   * @type {boolean}\n   */\n  let enforceNameWhitelist = false;\n\n\n  /**\n   * A value that is trusted to have certain security-relevant properties\n   * because the sources of such values are controlled.\n   */\n  class TrustedType {\n    /**\n     * Constructor for TrustedType. Only allowed to be called from within a\n     * policy.\n     * @param {symbol} s creatorSymbol\n     * @param {string} policyName The name of the policy this object was\n     *   created by.\n     */\n    constructor(s, policyName) {\n      // TODO: Figure out if symbol is needed, if the value is in privateMap.\n      if (s !== creatorSymbol) {\n        throw new Error('cannot call the constructor');\n      }\n      defineProperty(this, 'policyName',\n                     {value: '' + policyName, enumerable: true});\n    }\n\n    /**\n     * Returns the wrapped string value of the object.\n     * @return {string}\n     */\n    toString() {\n      return privates(this).value;\n    }\n\n    /**\n     * Returns the wrapped string value of the object.\n     * @return {string}\n     */\n    valueOf() {\n      return privates(this).value;\n    }\n  }\n\n  /**\n   * @param {!function(new:TrustedType, symbol, string)} SubClass\n   * @param {string} canonName The class name which should be independent of\n   *     any renaming pass and which is relied upon by the enforcer and for\n   *     native type interop.\n   */\n  function lockdownTrustedType(SubClass, canonName) {\n    freeze(SubClass.prototype);\n    delete SubClass.name;\n    defineProperty(SubClass, 'name', {value: canonName});\n  }\n\n  /**\n   * Trusted URL object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedURL extends TrustedType {\n  }\n  lockdownTrustedType(TrustedURL, 'TrustedURL');\n\n  /**\n   * Trusted Script URL object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedScriptURL extends TrustedType {\n  }\n  lockdownTrustedType(TrustedScriptURL, 'TrustedScriptURL');\n\n  /**\n   * Trusted HTML object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedHTML extends TrustedType {\n  }\n  lockdownTrustedType(TrustedHTML, 'TrustedHTML');\n\n  lockdownTrustedType(TrustedType, 'TrustedType');\n\n  /**\n   * Function generating a type checker.\n   * @template T\n   * @param  {T} type The type to check against.\n   * @return {function(*):boolean}\n   */\n  function isTrustedTypeChecker(type) {\n    return (obj) => (obj instanceof type) && privateMap.has(obj);\n  }\n\n  /**\n   * Function building a type from exposed policy\n   * @template T\n   * @param  {T} type        The type to build\n   * @param  {string} functionName Function name to call in a policy.\n   * @return {function(string,string):T} The type\n   */\n  function buildTypeFromExposedPolicy(type, functionName) {\n    return function(policyName, value) {\n      const policy = getExposedPolicy(policyName);\n      if (!(policy && apply(hasOwnProperty, policy, [functionName]))) {\n        throw new Error('Policy not found');\n      }\n      const policyFn = policy[functionName];\n      return policyFn(value);\n    };\n  }\n\n  /**\n   * Initial builder object for the policy.\n   * Its clone is passed to createPolicy builder function, with the expectation\n   * to modify its properties.\n   * @type {InnerPolicy}\n   */\n  const initialBuilder = {\n    'createHTML': (s) => {\n      throw new Error('undefined conversion');\n    },\n    'createURL': (s) => {\n      throw new Error('undefined conversion');\n    },\n    'createScriptURL': (s) => {\n      throw new Error('undefined conversion');\n    },\n    'expose': false, // Don't expose the policy by default.\n  };\n\n  /**\n   * Wraps a user-defined policy rules with TT constructor\n   * @param  {string} policyName The policy name\n   * @param  {InnerPolicy} innerPolicy InnerPolicy\n   * @return {Policy} Frozen policy object\n   */\n  function wrapPolicy(policyName, innerPolicy) {\n    /**\n     * @template T\n     * @param {!function(new:T, symbol, string)} Ctor a trusted type constructor\n     * @param {string} methodName the policy factory method name\n     * @return {!function(string):!T} a factory that produces instances of Ctor.\n     */\n    function creator(Ctor, methodName) {\n      // This causes thisValue to be null when called below.\n      const method = innerPolicy[methodName];\n      const policySpecificType = freeze(new Ctor(creatorSymbol, policyName));\n      const factory = {\n        [methodName](s) { // Trick to get methodName to show in stacktrace.\n          const o = freeze(create(policySpecificType));\n          privates(o).value = '' + method(s);\n          return o;\n        },\n      }[methodName];\n      return freeze(factory);\n    }\n\n    return freeze({\n      'createHTML': creator(TrustedHTML, 'createHTML'),\n      'createScriptURL': creator(TrustedScriptURL, 'createScriptURL'),\n      'createURL': creator(TrustedURL, 'createURL'),\n    });\n  }\n\n  /**\n   * Returns a policy object, if given policy was exposed.\n   * @param  {string} name\n   * @return {?Policy}\n   */\n  function getExposedPolicy(name) {\n    const pName = '' + name;\n    return exposedPolicies.get(pName) || null;\n  }\n\n  /**\n   * Returns all configured policy names (even for non-exposed policies).\n   * @return {!Array<string>}\n   */\n  function getPolicyNames() {\n    // TODO(msamuel): Should we sort policyNames to avoid leaking or\n    // encouraging dependency on the order in which policy names are\n    // registered?  I think JavaScript builtin sorts are efficient for\n    // almost-sorted lists so the amortized cost is close to O(n).\n    return policyNames.slice();\n  }\n\n  /**\n   * Creates a TT policy.\n   *\n   * Returns a frozen object representing a policy - a collection of functions\n   * that may create TT objects based on the user-provided rules specified\n   * in the builder function.\n   *\n   * @param  {string} name A unique name of the policy.\n   * @param  {function(InnerPolicy)} builder Function that defines\n   *   policy rules by modifying the initial policy object passed.\n   * @return {Policy} The policy that may create TT objects according to the\n   *   rules in the builder.\n   * @todo Figure out if the return value (and the builder) can be typed.\n   */\n  function createPolicy(name, builder) {\n    const pName = '' + name; // Assert it's a string\n\n    if (enforceNameWhitelist && !allowedNames.includes(pName)) {\n      throw new Error('Policy ' + pName + ' disallowed.');\n    }\n\n    if (policyNames.includes(pName)) {\n      throw new Error('Policy ' + pName + ' exists.');\n    }\n    // Register the name early so that if builder unwisely calls\n    // across protection domains to code that reenters this function,\n    // builder's author still has rights to the name.\n    policyNames.push(pName);\n\n    const innerPolicy = assign(create(null), initialBuilder);\n    builder(innerPolicy);\n    freeze(innerPolicy);\n\n    const policy = wrapPolicy(pName, innerPolicy);\n\n    if (innerPolicy['expose']) {\n      exposedPolicies.set(pName, policy);\n    }\n\n    return policy;\n  }\n\n  /**\n   * Applies the policy name whitelist.\n   * @param {!Array<string>} allowedPolicyNames\n   */\n  function setAllowedPolicyNames(allowedPolicyNames) {\n    if (allowedPolicyNames.includes('*')) { // Any policy name is allowed.\n      enforceNameWhitelist = false;\n    } else {\n      enforceNameWhitelist = true;\n      allowedNames.length = 0;\n      forEach.call(allowedPolicyNames, (el) => {\n        push.call(allowedNames, '' + el);\n      });\n    }\n  }\n\n  // TODO: Figure out if it's safe to return an instance of a typed object\n  // to make testing easier.\n  return freeze({\n\n    // Types definition, for convenience of instanceof checks\n    TrustedHTML,\n    TrustedURL,\n    TrustedScriptURL,\n\n    // Type builders from exposed policies, for convenience. Consider removing?\n    createHTML: buildTypeFromExposedPolicy(TrustedHTML, 'createHTML'),\n    createURL: buildTypeFromExposedPolicy(TrustedURL, 'createURL'),\n    createScriptURL: buildTypeFromExposedPolicy(TrustedScriptURL,\n        'createScriptURL'),\n\n    // The main function to create policies.\n    createPolicy,\n\n    // Policy getter\n    getExposedPolicy,\n\n    getPolicyNames,\n\n    // Below methods are not part of the public API and are only needed in the\n    // polyfill.\n\n    // Type checkers, also validating the object was initialized through a\n    // policy.\n    isHTML: isTrustedTypeChecker(TrustedHTML),\n    isURL: isTrustedTypeChecker(TrustedURL),\n    isScriptURL: isTrustedTypeChecker(TrustedScriptURL),\n\n    setAllowedPolicyNames,\n  });\n};\n\nexport const TrustedTypes = trustedTypesBuilderTestOnly();\n\n","/*\nCopyright 2017 Google Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * Installs the setter of a given property.\n * @param {!Object} object An object for which to wrap the property.\n * @param {string} name The name of the property to wrap.\n * @param {function(*): *|undefined} setter A setter function}\n */\nexport function installSetter(object, name, setter) {\n  Object.defineProperty(object, name, {\n    set: setter,\n  });\n}\n\n/**\n * Installs the setter of a given property.\n * @param {!Object} object An object for which to wrap the property.\n * @param {string} name The name of the property to wrap.\n * @param {function(*): *|undefined} fn A function}\n */\nexport function installFunction(object, name, fn) {\n  Object.defineProperty(object, name, {\n    value: fn,\n  });\n}\n","/*\nCopyright 2017 Google Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/* eslint-disable no-unused-vars */\nimport {TrustedTypeConfig} from './data/trustedtypeconfig.js';\nimport {TrustedTypes} from './trustedtypes.js';\n\n/* eslint-enable no-unused-vars */\nimport {installFunction, installSetter} from './utils/wrapper.js';\n\nconst {apply} = Reflect;\nconst {getOwnPropertyNames, hasOwnProperty} = Object;\n\n/**\n * A map of attribute names to allowed types.\n * @type {!Object<string, !Object<string, !Function>>}\n */\nconst SET_ATTRIBUTE_TYPE_MAP = {\n  // TODO(slekies): Add event handlers\n  // TODO(slekies): Add SVG Elements here\n  // TODO(koto): Figure out what to to with <link>\n  // TODO(koto): Trusted code for <script> contents\n  'HTMLAnchorElement': {\n    'href': TrustedTypes.TrustedURL,\n  },\n  'HTMLAreaElement': {\n    'href': TrustedTypes.TrustedURL,\n  },\n  'HTMLBaseElement': {\n    'href': TrustedTypes.TrustedURL,\n  },\n  'HTMLButtonElement': {\n    'formaction': TrustedTypes.TrustedURL,\n  },\n  'HTMLSourceElement': {\n    'src': TrustedTypes.TrustedURL,\n  },\n  'HTMLImageElement': {\n    'src': TrustedTypes.TrustedURL,\n    // TODO(slekies): add special handling for srcset\n  },\n  'HTMLTrackElement': {\n    'src': TrustedTypes.TrustedURL,\n  },\n  'HTMLMediaElement': {\n    'src': TrustedTypes.TrustedURL,\n  },\n  'HTMLInputElement': {\n    'src': TrustedTypes.TrustedURL,\n    'formaction': TrustedTypes.TrustedURL,\n  },\n  'HTMLFrameElement': {\n    'src': TrustedTypes.TrustedURL,\n  },\n  'HTMLIFrameElement': {\n    'src': TrustedTypes.TrustedURL,\n    'srcdoc': TrustedTypes.TrustedHTML,\n  },\n  'HTMLLinkElement': {\n    'href': TrustedTypes.TrustedScriptURL,\n  },\n  'HTMLObjectElement': {\n    'data': TrustedTypes.TrustedScriptURL,\n    'codebase': TrustedTypes.TrustedScriptURL,\n  },\n  'HTMLEmbedElement': {\n    'src': TrustedTypes.TrustedScriptURL,\n  },\n  'HTMLScriptElement': {\n    'src': TrustedTypes.TrustedScriptURL,\n  },\n};\n\n/**\n * Map of type names to type checking function.\n * @type {!Object<string,!Function>}\n */\nconst TYPE_CHECKER_MAP = {\n  'TrustedHTML': TrustedTypes.isHTML,\n  'TrustedURL': TrustedTypes.isURL,\n  'TrustedScriptURL': TrustedTypes.isScriptURL,\n};\n\n/**\n * Map of type names to type producing function.\n * @type {Object<string,!Function>}\n */\nconst TYPE_PRODUCER_MAP = {\n  'TrustedHTML': TrustedTypes.createHTML,\n  'TrustedURL': TrustedTypes.createURL,\n  'TrustedScriptURL': TrustedTypes.createScriptURL,\n};\n\n/**\n * A map of HTML attribute to element property names.\n * @type {!Object<string, string>}\n */\nconst ATTR_PROPERTY_MAP = {\n  'codebase': 'codeBase',\n  'formaction': 'formAction',\n};\n\n/**\n * An object for enabling trusted type enforcement.\n */\nexport class TrustedTypesEnforcer {\n  /**\n   * @param {!TrustedTypeConfig} config The configuration for\n   * trusted type enforcement.\n   */\n  constructor(config) {\n    /**\n     * A configuration for the trusted type enforcement.\n     * @private {!TrustedTypeConfig}\n     */\n    this.config_ = config;\n    /**\n     * @private {Object<string, !function(*): *|undefined>}\n     */\n    this.originalSetters_ = {};\n  }\n\n  /**\n   * Wraps HTML sinks with an enforcement setter, which will enforce\n   * trusted types and do logging, if enabled.\n   *\n   */\n  install() {\n    TrustedTypes.setAllowedPolicyNames(this.config_.allowedPolicyNames);\n    this.wrapSetter_(Element.prototype, 'innerHTML', TrustedTypes.TrustedHTML);\n    this.wrapSetter_(Element.prototype, 'outerHTML', TrustedTypes.TrustedHTML);\n    this.wrapWithEnforceFunction_(Range.prototype, 'createContextualFragment',\n        TrustedTypes.TrustedHTML, 0);\n    this.wrapWithEnforceFunction_(Element.prototype, 'insertAdjacentHTML',\n        TrustedTypes.TrustedHTML, 1);\n\n    if (Object.getOwnPropertyDescriptor(Document.prototype, 'write')) {\n      // Chrome\n      this.wrapWithEnforceFunction_(Document.prototype, 'write',\n          TrustedTypes.TrustedHTML, 0);\n    } else {\n      // Firefox\n      this.wrapWithEnforceFunction_(HTMLDocument.prototype, 'write',\n        TrustedTypes.TrustedHTML, 0);\n    }\n\n    this.wrapWithEnforceFunction_(window, 'open', TrustedTypes.TrustedURL, 0);\n    if (DOMParser) {\n      this.wrapWithEnforceFunction_(DOMParser.prototype, 'parseFromString',\n          TrustedTypes.TrustedHTML, 0);\n    }\n    this.wrapSetAttribute_();\n    this.installPropertySetWrappers_();\n  }\n\n  /**\n   * Removes the original setters.\n   */\n  uninstall() {\n    this.restoreSetter_(Element.prototype, 'innerHTML');\n    this.restoreSetter_(Element.prototype, 'outerHTML');\n    this.restoreFunction_(Range.prototype, 'createContextualFragment');\n    this.restoreFunction_(Element.prototype, 'insertAdjacentHTML');\n    this.restoreFunction_(Element.prototype, 'setAttribute');\n    this.restoreFunction_(Element.prototype, 'setAttributeNS');\n    if (Object.getOwnPropertyDescriptor(Document.prototype, 'write')) {\n      this.restoreFunction_(Document.prototype, 'write');\n    } else {\n      this.restoreFunction_(HTMLDocument.prototype, 'write');\n    }\n    this.restoreFunction_(window, 'open');\n    if (DOMParser) {\n      this.restoreFunction_(DOMParser.prototype, 'parseFromString');\n    }\n    this.uninstallPropertySetWrappers_();\n    TrustedTypes.setAllowedPolicyNames(['*']);\n  }\n\n  /**\n   * Installs wrappers for directly setting properties\n   * based on SET_ATTRIBUTE_TYPE_MAP.\n   * @private\n   */\n  installPropertySetWrappers_() {\n    /* eslint-disable guard-for-in */\n    for (let type of getOwnPropertyNames(SET_ATTRIBUTE_TYPE_MAP)) {\n      for (let attribute of getOwnPropertyNames(SET_ATTRIBUTE_TYPE_MAP[type])) {\n        const property = apply(hasOwnProperty, ATTR_PROPERTY_MAP, [attribute]) ?\n              ATTR_PROPERTY_MAP[attribute] : attribute;\n        this.wrapSetter_(window[type].prototype, property,\n                         SET_ATTRIBUTE_TYPE_MAP[type][attribute]);\n      }\n    }\n  }\n\n  /**\n   * Uninstalls wrappers for directly setting properties\n   * based on SET_ATTRIBUTE_TYPE_MAP.\n   * @private\n   */\n  uninstallPropertySetWrappers_() {\n    /* eslint-disable guard-for-in */\n    for (let type of getOwnPropertyNames(SET_ATTRIBUTE_TYPE_MAP)) {\n      for (let attribute of getOwnPropertyNames(SET_ATTRIBUTE_TYPE_MAP[type])) {\n        const property = attribute in ATTR_PROPERTY_MAP ?\n              ATTR_PROPERTY_MAP[attribute] : attribute;\n        this.restoreSetter_(window[type].prototype, property);\n      }\n    }\n  }\n\n  /** Wraps set attribute with an enforcement function. */\n  wrapSetAttribute_() {\n    let that = this;\n    this.wrapFunction_(\n        Element.prototype,\n        'setAttribute',\n        /**\n         * @this {TrustedTypesEnforcer}\n         * @param {!Function<!Function, *>} originalFn\n         * @return {*}\n         */\n        function(originalFn, ...args) {\n          return that.setAttributeWrapper_\n              .bind(that, this, originalFn)\n              .apply(that, args);\n        });\n    this.wrapFunction_(\n      Element.prototype,\n      'setAttributeNS',\n      /**\n         * @this {TrustedTypesEnforcer}\n         * @param {!Function<!Function, *>} originalFn\n         * @return {*}\n         */\n        function(originalFn, ...args) {\n          return that.setAttributeNSWrapper_\n              .bind(that, this, originalFn)\n              .apply(that, args);\n        });\n  }\n\n  /**\n   * Enforces type checking for Element.prototype.setAttribute.\n   * @param {!Object} context The context for the call to the original function.\n   * @param {!Function} originalFn The original setAttribute function.\n   * @return {*}\n   */\n  setAttributeWrapper_(context, originalFn, ...args) {\n    // Note(slekies): In a normal application constructor should never be null.\n    // However, there are no guarantees. If the constructor is null, we cannot\n    // determine whether a special type is required. In order to not break the\n    // application, we will not do any further type checks and pass the call\n    // to setAttribute.\n    if (context.constructor !== null) {\n      let attrName = (args[0] = String(args[0])).toLowerCase();\n      let type = context.constructor && context.constructor.name &&\n          SET_ATTRIBUTE_TYPE_MAP[context.constructor.name] &&\n          SET_ATTRIBUTE_TYPE_MAP[context.constructor.name][attrName];\n\n      if (type instanceof Function) {\n        return this.enforce_(\n          context, 'setAttribute', type, originalFn, 1, args);\n      }\n    }\n\n    return originalFn.apply(context, args);\n  }\n\n  /**\n   * Enforces type checking for Element.prototype.setAttributeNS.\n   * @param {!Object} context The context for the call to the original function.\n   * @param {!Function} originalFn The original setAttributeNS function.\n   * @return {*}\n   */\n  setAttributeNSWrapper_(context, originalFn, ...args) {\n    /**\n     * @param {string} ns the namespace URL.\n     * @return {boolean} true iff the given argument is an HTML namespace.\n     */\n    function isHtmlNamespace(ns) {\n      return true; // TODO(msamuel): implement me\n    }\n    // See the note from setAttributeWrapper_ above.\n    if (context.constructor !== null) {\n      let ns = (args[0] = String(args[0])).toLowerCase();\n      let attrName = (args[1] = String(args[1])).toLowerCase();\n      if (isHtmlNamespace(ns)) {\n        let type = context.constructor && context.constructor.name &&\n            SET_ATTRIBUTE_TYPE_MAP[context.constructor.name] &&\n            SET_ATTRIBUTE_TYPE_MAP[context.constructor.name][attrName];\n\n        if (type instanceof Function) {\n          return this.enforce_(\n            context, 'setAttributeNS', type, originalFn, 2, args);\n        }\n      }\n      // TODO(msamuel): handle SVG namespace.  See TODO(slekies) above.\n    }\n\n    return originalFn.apply(context, args);\n  }\n\n\n  /**\n   * Wraps a setter with the enforcement wrapper.\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @param {!Function} type The type to enforce.\n   * @param {number} argNumber Number of the argument to enforce the type of.\n   * @private\n   */\n  wrapWithEnforceFunction_(object, name, type, argNumber) {\n    let that = this;\n    this.wrapFunction_(\n        object,\n        name,\n        /**\n         * @this {TrustedTypesEnforcer}\n         * @param {!Function<!Function, *>} originalFn\n         * @return {*}\n         */\n        function(originalFn, ...args) {\n          return that.enforce_.call(that, this, name, type, originalFn,\n                                    argNumber, args);\n        });\n  }\n\n\n  /**\n   * Wraps an existing function with a given function body and stores the\n   * original function.\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @param {!Function<!Function, *>} functionBody The wrapper function.\n   */\n  wrapFunction_(object, name, functionBody) {\n    let descriptor = Object.getOwnPropertyDescriptor(object, name);\n    let originalFn = /** @type function(*):* */ (\n        descriptor ? descriptor.value : null);\n\n    if (!(originalFn instanceof Function)) {\n      throw new TypeError(\n          'Property ' + name + ' on object' + object + ' is not a function');\n    }\n\n    let key = this.getKey_(object, name);\n    if (this.originalSetters_[key]) {\n      throw new Error('TrustedTypesEnforcer: Double installation detected');\n    }\n    installFunction(\n        object,\n        name,\n        /**\n         * @this {TrustedTypesEnforcer}\n         * @return {*}\n         */\n        function(...args) {\n          return functionBody.bind(this, originalFn).apply(this, args);\n        });\n    this.originalSetters_[key] = originalFn;\n  }\n\n  /**\n   * Wraps a setter with the enforcement wrapper.\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @param {!Function} type The type to enforce.\n   * @private\n   */\n  wrapSetter_(object, name, type) {\n    let originalSetter = /** @type {!Function} */\n        (Object.getOwnPropertyDescriptor(object, name).set);\n    let key = this.getKey_(object, name);\n    if (this.originalSetters_[key]) {\n      throw new Error('TrustedTypesEnforcer: Double installation detected');\n    }\n    let that = this;\n    installSetter(\n        object,\n        name,\n        /**\n         * @this {TrustedTypesEnforcer}\n         * @param {*} value\n         */\n        function(value) {\n          that.enforce_.call(that, this, name, type, originalSetter, 0,\n                             [value]);\n        });\n    this.originalSetters_[key] = originalSetter;\n  }\n\n  /**\n   * Restores the original setter for the property, as encountered during\n   * install().\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @private\n   */\n  restoreSetter_(object, name) {\n    let key = this.getKey_(object, name);\n    if (!this.originalSetters_[key]) {\n      throw new Error(\n          'TrustedTypesEnforcer: Cannot restore (double uninstallation?)');\n    }\n    installSetter(object, name, this.originalSetters_[key]);\n    delete this.originalSetters_[key];\n  }\n\n  /**\n   * Restores the original method of an object, as encountered during install().\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @private\n   */\n  restoreFunction_(object, name) {\n    let key = this.getKey_(object, name);\n    if (!this.originalSetters_[key]) {\n      throw new Error(\n          'TrustedTypesEnforcer: Cannot restore (double uninstallation?)');\n    }\n    installFunction(object, name, this.originalSetters_[key]);\n    delete this.originalSetters_[key];\n  }\n\n  /**\n   * Returns the key name for caching original setters.\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @return {string} Key name.\n   * @private\n   */\n  getKey_(object, name) {\n    // TODO(msamuel): Can we use Object.prototype.toString.call(object)\n    // to get an unspoofable string here?\n    // TODO(msamuel): fail on '-' in object.constructor.name?\n    return '' + object.constructor.name + '-' + name;\n  }\n\n  /**\n   * Logs and enforces TrustedTypes depending on the given configuration.\n   * @template T\n   * @param {!Object} context The object that the setter is called for.\n   * @param {string} propertyName The name of the property.\n   * @param {!Function} typeToEnforce The type to enforce.\n   * @param {!function(*):T} originalSetter Original setter.\n   * @param {number} argNumber Number of argument to enforce the type of.\n   * @param {Array} args Arguments.\n   * @return {T}\n   * @private\n   */\n  enforce_(context, propertyName, typeToEnforce, originalSetter, argNumber,\n           args) {\n    let value = args[argNumber];\n    const typeName = '' + typeToEnforce.name;\n    if (TYPE_CHECKER_MAP.hasOwnProperty(typeName) &&\n        TYPE_CHECKER_MAP[typeName](value)) {\n      return apply(originalSetter, context, args);\n    }\n\n    const fallback = this.config_.fallbackPolicyName;\n    if (fallback && TrustedTypes.getPolicyNames().includes(fallback)) {\n      let fallbackValue = TYPE_PRODUCER_MAP[typeName](fallback, value);\n      if (TYPE_CHECKER_MAP.hasOwnProperty(typeName) &&\n          TYPE_CHECKER_MAP[typeName](fallbackValue)) {\n        args[argNumber] = fallbackValue;\n        return apply(originalSetter, context, args);\n      }\n    }\n\n    let message = 'Failed to set ' + propertyName + ' property on ' +\n        ('' + context || context.constructor.name) +\n        ': This document requires `' + (typeToEnforce.name) + '` assignment.';\n\n    if (this.config_.isLoggingEnabled) {\n      // eslint-disable-next-line no-console\n      console.warn(message, propertyName, context, typeToEnforce, value);\n    }\n\n    if (this.config_.isEnforcementEnabled) {\n      throw new TypeError(message);\n    }\n  }\n}\n","/*\nCopyright 2018 Google Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * @fileoverview Entry point for a polyfill that only defines the types\n * (i.e. no enforcement logic).\n */\nimport {TrustedTypes as tt} from '../trustedtypes.js';\n\n// Make sure Closure compiler exposes the names.\nif (typeof window !== 'undefined' &&\n    typeof window['TrustedTypes'] === 'undefined') {\n  window['TrustedTypes'] = {\n    'TrustedHTML': tt.TrustedHTML,\n    'TrustedURL': tt.TrustedURL,\n    'TrustedScriptURL': tt.TrustedScriptURL,\n    'createHTML': tt.createHTML,\n    'createURL': tt.createURL,\n    'createScriptURL': tt.createScriptURL,\n    'createPolicy': tt.createPolicy,\n    'getExposedPolicy': tt.getExposedPolicy,\n    'getPolicyNames': tt.getPolicyNames,\n  };\n}\n\nexport default tt;\n","/*\nCopyright 2017 Google Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * @fileoverview Entry point for a polyfill that enforces the types.\n */\nimport {TrustedTypesEnforcer} from '../enforcer.js';\nimport {TrustedTypeConfig} from '../data/trustedtypeconfig.js';\n/* eslint-disable no-unused-vars */\nimport TrustedTypes from './api_only.js';\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Tries to guess a CSP policy from:\n *  - the current polyfill script element text content (if prefixed with\n *    \"Content-Security-Policy:\")\n *  - the data-csp attribute value of the current script element.\n *  - meta header\n * @return {?string} Guessed CSP value, or null.\n */\nfunction detectPolicy() {\n    try {\n        const currentScript = document.currentScript || (function() {\n          let scripts = document.getElementsByTagName('script');\n          return scripts[scripts.length - 1];\n        })();\n\n        const bodyPrefix = 'Content-Security-Policy:';\n        if (currentScript &&\n            currentScript.textContent.trim().substr(0, bodyPrefix.length) ==\n                bodyPrefix) {\n            return currentScript.textContent.trim().slice(bodyPrefix.length);\n        }\n        if (currentScript.dataset.csp) {\n            return currentScript.dataset.csp;\n        }\n        const cspInMeta = document.head.querySelector(\n            'meta[http-equiv^=\"Content-Security-Policy\"]');\n        if (cspInMeta) {\n            return cspInMeta.content.trim();\n        }\n    } catch (e) {\n        return null;\n    }\n    return null;\n}\n\n/**\n * Bootstraps all trusted types polyfill and their enforcement.\n */\nexport function bootstrap() {\n  const csp = detectPolicy();\n  const config = csp ? TrustedTypeConfig.fromCSP(csp) : new TrustedTypeConfig(\n    /* isLoggingEnabled */ true,\n    /* isEnforcementEnabled */ true,\n    /* fallbackPolicyName */ null,\n    /* allowedPolicyNames */ ['*']);\n\n  const trustedTypesEnforcer = new TrustedTypesEnforcer(config);\n\n  trustedTypesEnforcer.install();\n}\n\nbootstrap();\n"],
"names":["TrustedTypeConfig","isLoggingEnabled","isEnforcementEnabled","fallbackPolicyName","allowedPolicyNames","cspString","WHITESPACE","trim","split","SEMICOLON","map","serializedDirective","reduce","parsed","directive","slice","s","sort","policy","parseCSP","enforce","apply","Reflect","hasOwnProperty","Object","prototype","TrustedTypes","trustedTypesBuilderTestOnly","privates","obj","v","privateMap","get","undefined","create","set","selfContained","collection","proto","getPrototypeOf","ObjectPrototype","Error","key","getOwnPropertyNames","defineProperty","value","lockdownTrustedType","SubClass","canonName","freeze","name","isTrustedTypeChecker","type","has","buildTypeFromExposedPolicy","functionName","policyName","getExposedPolicy","policyFn","wrapPolicy","innerPolicy","creator","Ctor","methodName","method","policySpecificType","creatorSymbol","o","factory","TrustedHTML","TrustedScriptURL","TrustedURL","exposedPolicies","assign","forEach","push","Array","Symbol","WeakMap","policyNames","Map","allowedNames","enforceNameWhitelist","TrustedType","enumerable","initialBuilder","createHTML","createURL","createScriptURL","createPolicy","builder","pName","includes","getPolicyNames","isHTML","isURL","isScriptURL","setAllowedPolicyNames","length","call","el","installSetter","object","setter","installFunction","fn","SET_ATTRIBUTE_TYPE_MAP","TYPE_CHECKER_MAP","TYPE_PRODUCER_MAP","ATTR_PROPERTY_MAP","TrustedTypesEnforcer","config","config_","originalSetters_","wrapSetter_","Element","wrapWithEnforceFunction_","Range","getOwnPropertyDescriptor","Document","HTMLDocument","window","DOMParser","wrapSetAttribute_","installPropertySetWrappers_","attribute","property","that","wrapFunction_","originalFn","args","setAttributeWrapper_","bind","setAttributeNSWrapper_","context","constructor","attrName","toLowerCase","String","Function","enforce_","argNumber","functionBody","descriptor","TypeError","getKey_","originalSetter","propertyName","typeToEnforce","typeName","fallback","fallbackValue","message","console","warn","csp","detectPolicy","currentScript","scripts","document","getElementsByTagName","bodyPrefix","textContent","substr","dataset","cspInMeta","head","querySelector","content","e","fromCSP","install","trustedTypesEnforcer"]
}
